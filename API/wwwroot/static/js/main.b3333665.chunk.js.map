{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commomStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/error/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/AcitvityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/error/TestError.tsx","features/error/NotFound.tsx","features/error/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEdit.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axious","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","axios","details","id","create","activity","update","attend","Account","current","login","user","regiseter","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","cred","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","register","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBottom","fluid","ValidationError","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","styple","isLoggedIn","RegisterForm","Divider","horizontal","width","marginTop","attached","active","has","onChange","Reveal","animated","Content","visible","hidden","e","preventDefault","handleFollow","ProfileCard","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","secondary","AcitvityListItemAttendee","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","GridColumn","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Column","Loader","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","minHegiht","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderColder","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTraget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"6WAOaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA2C,IAA/BC,EAA8B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAH1CD,gBAG0C,OAF1CC,cAE0C,EACtCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,G,2CCNxBC,IAAOC,SAASC,QAAUC,OAE1BH,IAAOI,aAAaC,QAAQC,KAAI,SAAAC,GAC5B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXP,IAAOI,aAAaS,SAASP,IAA7B,+BAAAQ,EAAA,MAAiC,WAAMD,GAAN,eAAAC,EAAA,iFAEvBnB,EAAakB,EAASF,QAAT,YAFU,uBAIzBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IAJrC,kBAKlBkB,GALkB,gCAOtBA,GAPsB,2CAAjC,uDAQG,SAACI,GAAuB,IAAD,EACSA,EAAMJ,SAA9BnB,EADe,EACfA,KAAMwB,EADS,EACTA,OAAQX,EADC,EACDA,OACrB,OAAQW,GACJ,KAAK,IAOD,GANoB,kBAATxB,GACPyB,IAAMF,MAAMvB,GAEM,QAAlBa,EAAOa,QAAoB1B,EAAK2B,OAAOC,eAAe,OACtDC,GAAQC,KAAK,cAEb9B,EAAK2B,OAAO,CACZ,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOhC,EAAK2B,OACf3B,EAAK2B,OAAOK,IACZD,EAAiBD,KAAK9B,EAAK2B,OAAOK,IAG1C,MAAMD,EAAiBE,OAE3B,MACJ,KAAK,IACDR,IAAMF,MAAM,gBACZ,MACJ,KAAK,IACDM,GAAQC,KAAK,cACb,MACJ,KAAK,IACDf,EAAMC,YAAYkB,eAAelC,GACjC6B,GAAQC,KAAK,iBAGrB,OAAOK,QAAQC,OAAOb,MAG1B,IAAMc,EAAe,SAAKlB,GAAL,OAAoCA,EAASnB,MAE5DsC,EACG,SAAKC,GAAL,OAAoBjC,IAAOkC,IAAOD,GAAKE,KAAKJ,IAD/CC,EAEI,SAAIC,EAAYG,GAAhB,OAA6BpC,IAAOqC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFhEC,EAGG,SAAIC,EAAYG,GAAhB,OAA6BpC,IAAOsC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIG,SAAIC,GAAJ,OAAmBjC,IAAOuC,OAAUN,GAAKE,KAAKJ,IA6CvCS,EANH,CACTC,WArCe,CACfC,KAAM,SAACC,GAAD,OAA6BC,IAAMV,IAAiC,cAAe,CAACS,WACrFR,KAAKJ,IACVc,QAAS,SAACC,GAAD,OAAgBd,EAAA,sBAAsCc,KAC/DC,OAAQ,SAACC,GAAD,OAAkChB,EAAoB,cAAegB,IAC7EC,OAAQ,SAACD,GAAD,OAAkChB,EAAA,sBAAkCgB,EAASF,IAAKE,IAC1FT,OAAQ,SAACO,GAAD,OAAgBd,EAAA,sBAAkCc,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBd,EAAA,sBAAmCc,EAAnC,WAAgD,MA+BxEK,QA5BY,CACZC,QAAS,kBAAMpB,EAAmB,aAClCqB,MAAO,SAACC,GAAD,OAA0BtB,EAAoB,iBAAkBsB,IACvEC,UAAW,SAACD,GAAD,OAA0BtB,EAAoB,oBAAqBsB,IAC9EE,QAAS,SAACC,GAAD,OAAyBzB,EAAA,uCAAoDyB,GAAe,MAyBrGC,SAtBa,CACbxB,IAAK,SAACyB,GAAD,OAAsB3B,EAAA,oBAAmC2B,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjBjB,IAAMP,KAAY,SAAUyB,EAAU,CACzCnD,QAAS,CAAC,eAAgB,0BAGlCsD,aAAc,SAACnB,GAAD,OAAgBd,EAAA,kBAAyBc,EAAzB,YAAuC,KACrEoB,YAAa,SAACpB,GAAD,OAAgBd,EAAA,kBAAwBc,KACrDqB,cAAe,SAACC,GAAD,OAA+BpC,EAAA,YAA0BoC,IACxEC,gBAAiB,SAACV,GAAD,OAAsB3B,EAAA,kBAAyB2B,GAAW,KAC3EW,eAAgB,SAACX,EAAkBY,GAAnB,OACZvC,EAAA,kBAAmC2B,EAAnC,sBAAyDY,KAC7DC,eAAgB,SAACb,EAAkBY,GAAnB,OACZvC,EAAA,oBAA0C2B,EAA1C,iCAA2EY,OC3FpEE,EACX,WAAYC,GAA4B,oBACtCC,OAAOC,OAAOhF,KAAM8E,IAIXG,EASX,WAAY7B,GAAgC,yBAR5CF,QAAcgC,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGVpC,IACFpD,KAAKkD,GAAKE,EAASF,GACnBlD,KAAKmF,MAAQ/B,EAAS+B,MACtBnF,KAAKoF,SAAWhC,EAASgC,SACzBpF,KAAKqF,YAAcjC,EAASiC,YAC5BrF,KAAKsF,KAAOlC,EAASkC,KACrBtF,KAAKwF,MAAQpC,EAASoC,MACtBxF,KAAKuF,KAAOnC,EAASmC,OC5BhBE,EACT,WAAY/B,GAAa,oBACrB1D,KAAK+D,SAAWL,EAAKK,SACrB/D,KAAK0F,YAAchC,EAAKgC,YACxB1F,KAAK2F,MAAQjC,EAAKiC,OCTLC,E,WAUjB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyCb,EAQ3B,KAPdc,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJdnG,WAAgC,KAIlB,KAHdoG,aAAe,IAAIlG,EAGL,KAFd0E,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEnB,KAadC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAdV,KAiBdG,aAAe,SAAC3B,EAAmB4B,GAC/B,IAAMC,EAAiB,WACnB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAOzE,GACf,cAARA,GAAqB,EAAK6C,UAAUhC,OAAOb,OAGvD,OAAQ6C,GACJ,IAAK,MACD6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAUhC,OAAO,aACtB,EAAKgC,UAAUyB,IAAI,YAAaG,KAtC9B,KAuEdG,eAvEc,sBAuEG,4BAAAxF,EAAA,6DACb,EAAKgF,gBAAiB,EADT,kBAGYtD,EAAMC,WAAWC,KAAK,EAAK6D,aAHvC,QAGHC,EAHG,QAIF9G,KAAK2G,SAAQ,SAAArD,GACZ,EAAKyD,YAAYzD,MAEzB,EAAK0D,cAAcF,EAAO7G,YAC1B,EAAKgH,mBAAkB,GARd,kDAUTC,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAXd,0DAvEH,KAsFdD,cAAgB,SAAC/G,GACb,EAAKA,WAAaA,GAvFR,KA0FdmH,aA1Fc,uCA0FC,WAAOhE,GAAP,eAAAhC,EAAA,2DACPkC,EAAW,EAAK+D,YAAYjE,IADrB,uBAGP,EAAK6C,iBAAmB3C,EAHjB,kBAIAA,GAJA,cAMP,EAAK8C,gBAAiB,EANf,mBAQctD,EAAMC,WAAWI,QAAQC,GARvC,eAQHE,EARG,OASH,EAAKyD,YAAYzD,GACjBgE,aAAY,WACR,EAAKrB,iBAAmB3C,KAE5B,EAAK2D,mBAAkB,GAbpB,kBAcI3D,GAdJ,kCAgBH4D,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAjBpB,0DA1FD,2DAgHNF,YAAc,SAACzD,GACnB,IACU,EADJM,EAAO7C,EAAMwG,UAAU3D,KACzBA,IACAN,EAASkE,QAAUlE,EAASmE,UAAWC,MACnC,SAAAtG,GAAC,OAAIA,EAAE6C,WAAaL,EAAKK,YAE7BX,EAASqE,OAASrE,EAASsE,eAAiBhE,EAAKK,SACjDX,EAASuE,KAAT,UAAgBvE,EAASmE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAE9D,WAAaX,EAASsE,iBAE1EtE,EAASkC,KAAO,IAAIwC,KAAK1E,EAASkC,MAClC,EAAKO,iBAAiBO,IAAIhD,EAASF,GAAIE,IA1H7B,KA6HN+D,YAAc,SAACjE,GACnB,OAAO,EAAK2C,iBAAiBvD,IAAIY,IA9HvB,KAiId6D,kBAAoB,SAACgB,GACjB,EAAK7B,eAAiB6B,GAlIZ,KAqIdC,eArIc,uCAqIG,WAAO5E,GAAP,mBAAAlC,EAAA,6DACPwC,EAAO7C,EAAMwG,UAAU3D,KACvBuE,EAAW,IAAIxC,EAAQ/B,GAFhB,kBAIHd,EAAMC,WAAWM,OAAOC,GAJrB,QAKH8E,EAAc,IAAIrD,EAASzB,IACrBsE,aAAehE,EAAMK,SACjCmE,EAAYX,UAAY,CAACU,GACzB,EAAKpB,YAAYqB,GACjBd,aAAY,WACR,EAAKrB,iBAAmBmC,KAVnB,kDAaTlB,QAAQC,IAAR,MAbS,0DArIH,2DAsJdkB,eAtJc,uCAsJG,WAAO/E,GAAP,SAAAlC,EAAA,+EAEH0B,EAAMC,WAAWQ,OAAOD,GAFrB,OAGTgE,aAAY,WACR,GAAIhE,EAASF,GAAI,CACb,IAAIiF,EAAc,2BAAO,EAAKhB,YAAY/D,EAASF,KAAQE,GAC3D,EAAKyC,iBAAiBO,IAAIhD,EAASF,GAAIiF,GACvC,EAAKpC,iBAAmBoC,MAPvB,+CAWTnB,QAAQC,IAAR,MAXS,wDAtJH,2DAqKdmB,eArKc,uCAqKG,WAAOlF,GAAP,SAAAhC,EAAA,6DACb,EAAK+E,SAAU,EADF,kBAGHrD,EAAMC,WAAWF,OAAOO,GAHrB,OAITkE,aAAY,WACR,EAAKvB,iBAAiBlD,OAAOO,GAC7B,EAAK+C,SAAU,KANV,gDASTe,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKnB,SAAU,KAXV,yDArKH,2DAqLdoC,iBArLc,sBAqLK,4BAAAnH,EAAA,6DACTwC,EAAO7C,EAAMwG,UAAU3D,KAC7B,EAAKuC,SAAU,EAFA,kBAILrD,EAAMC,WAAWS,OAAO,EAAKyC,iBAAkB7C,IAJ1C,OAKXkE,aAAY,WAAO,IAAD,EACd,aAAI,EAAKrB,wBAAT,aAAI,EAAuBuB,QAAS,CAAC,IAAD,EAChC,EAAKvB,iBAAiBwB,UAAtB,UACI,EAAKxB,iBAAiBwB,iBAD1B,aACI,EAAiCe,QAAO,SAAApH,GAAC,OAAIA,EAAE6C,YAAF,OAAeL,QAAf,IAAeA,OAAf,EAAeA,EAAMK,aACtE,EAAKgC,iBAAiBuB,SAAU,MAC7B,CAAC,IAAD,IACGW,EAAW,IAAIxC,EAAQ/B,GAC7B,YAAKqC,wBAAL,mBAAuBwB,iBAAvB,SAAkC3F,KAAKqG,GACvC,EAAKlC,iBAAkBuB,SAAU,EAErC,EAAKzB,iBAAiBO,IAAI,EAAKL,iBAAkB7C,GAAI,EAAK6C,qBAfnD,gDAkBXiB,QAAQC,IAAR,MAlBW,yBAoBXG,aAAY,kBAAM,EAAKnB,SAAU,KApBtB,4EArLL,KA6MdsC,qBA7Mc,sBA6MS,sBAAArH,EAAA,6DACnB,EAAK+E,SAAU,EADI,kBAGTrD,EAAMC,WAAWS,OAAO,EAAKyC,iBAAkB7C,IAHtC,OAIfkE,aAAY,WAAO,IAAD,EACd,EAAKrB,iBAAkByC,cAAc,UAAC,EAAKzC,wBAAN,aAAC,EAAuByC,aAC7D,EAAK3C,iBAAiBO,IAAI,EAAKL,iBAAkB7C,GAAI,EAAK6C,qBAN/C,gDASfiB,QAAQC,IAAR,MATe,yBAWfG,aAAY,kBAAM,EAAKnB,SAAU,KAXlB,4EA7MT,KA4NdwC,wBAA0B,SAAC1E,GACvB,EAAK8B,iBAAiBY,SAAQ,SAAArD,GAC1BA,EAASmE,UAAUd,SAAQ,SAAAwB,GACnBA,EAASlE,WAAaA,IACtBkE,EAASS,UAAYT,EAASU,iBAAmBV,EAASU,iBAC1DV,EAASS,WAAaT,EAASS,kBAjOjC,KAuOdE,sBAAwB,WACpB,EAAK7C,sBAAmBb,GAvOxB2D,YAAmB7I,MAEnB8I,aACI,kBAAM,EAAKnE,UAAUoE,UACrB,WACI,EAAK5C,aAAe,IAAIlG,EACxB,EAAK4F,iBAAiBmD,QACtB,EAAKtC,oB,6CAkCjB,WACI,IAAM3D,EAAS,IAAIkG,gBAUnB,OATAlG,EAAOqB,OAAO,aAAcpE,KAAKmG,aAAajG,WAAWgJ,YACzDnG,EAAOqB,OAAO,WAAYpE,KAAKmG,aAAahG,SAAS+I,YACrDlJ,KAAK2E,UAAU8B,SAAQ,SAACF,EAAOzE,GACf,cAARA,EACAiB,EAAOqB,OAAOtC,EAAMyE,EAAe4C,eAEnCpG,EAAOqB,OAAOtC,EAAKyE,MAGpBxD,I,4BAGX,WACI,OAAOqG,MAAMC,KAAKrJ,KAAK6F,iBAAiByD,UAAUC,MAAK,SAACrI,EAAGsI,GAAJ,OACnDtI,EAAEoE,KAAMmE,UAAYD,EAAElE,KAAMmE,e,6BAGpC,WACI,OAAO1E,OAAO2E,QACV1J,KAAK2J,iBAAiBC,QAAO,SAACC,EAAYzG,GACtC,IAAMkC,EAAOwE,YAAO1G,EAASkC,KAAO,eAEpC,OADAuE,EAAWvE,GAAQuE,EAAWvE,GAAX,sBAAuBuE,EAAWvE,IAAlC,CAAyClC,IAAY,CAACA,GAClEyG,IACR,S,cChFME,E,WAWjB,aAAe,IAAD,gCAVdvF,QAA0B,KAUZ,KATdwF,gBAAiB,EASH,KARdC,WAAY,EAQE,KAPdhE,SAAU,EAOI,KANdiE,WAAwB,GAMV,KALdC,mBAAoB,EAKN,KAJdC,UAAY,EAIE,KAHdC,eAAiC,GAGnB,KAFdC,mBAAoB,EAEN,KAgBdC,aAAc,SAACH,GACX,EAAKA,UAAYA,GAjBP,KA2BdI,YA3Bc,uCA2BA,WAAOzG,GAAP,eAAA7C,EAAA,6DACV,EAAK8I,gBAAiB,EADZ,kBAGgBpH,EAAMkB,SAASxB,IAAIyB,GAHnC,OAGAS,EAHA,OAIN4C,aAAY,WACR,EAAK5C,QAAUA,EACf,EAAKwF,gBAAiB,KANpB,gDASNhD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK4C,gBAAiB,KAVlC,yDA3BA,2DAyCdhG,YAzCc,uCAyCA,WAAOC,GAAP,iBAAA/C,EAAA,6DACV,EAAK+I,WAAY,EADP,kBAGiBrH,EAAMkB,SAASE,YAAYC,GAH5C,OAGAhD,EAHA,OAIAwJ,EAAQxJ,EAASnB,KACvBsH,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,YAAKA,QAAQkG,cAAb,SAAqB9I,KAAK6I,GACtBA,EAAME,QAAU9J,EAAMwG,UAAU3D,OAChC7C,EAAMwG,UAAUuD,SAASH,EAAMpI,KAC/B,EAAKmC,QAAQmB,MAAO8E,EAAMpI,MAGlC,EAAK4H,WAAY,KAbf,gDAgBNjD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6C,WAAY,KAjB7B,yDAzCA,2DA8Dd5F,aA9Dc,uCA8DC,WAAOoG,GAAP,SAAAvJ,EAAA,6DACX,EAAK+E,SAAU,EADJ,kBAGDrD,EAAMkB,SAASO,aAAaoG,EAAMvH,IAHjC,OAIPrC,EAAMwG,UAAUuD,SAASH,EAAMpI,KAC/B+E,aAAY,WACJ,EAAK5C,SAAW,EAAKA,QAAQkG,SAC7B,EAAKlG,QAAQkG,OAAO9C,MAAK,SAAAiD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKnG,QAAQkG,OAAO9C,MAAK,SAAAiD,GAAC,OAAIA,EAAE3H,KAAOuH,EAAMvH,MAAKyH,QAAS,EAC3D,EAAKnG,QAAQmB,MAAQ8E,EAAMpI,IAC3B,EAAK4D,SAAU,MAVhB,gDAcPe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAf1B,yDA9DD,2DAiFd3B,YAjFc,uCAiFA,WAAOmG,GAAP,SAAAvJ,EAAA,6DACV,EAAK+E,SAAU,EADL,kBAGArD,EAAMkB,SAASQ,YAAYmG,EAAMvH,IAHjC,OAINkE,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,EAAKA,QAAQkG,OAAb,UAAsB,EAAKlG,QAAQkG,cAAnC,aAAsB,EAAqBpC,QAAO,SAAAuC,GAAC,OAAIA,EAAE3H,KAAOuH,EAAMvH,MACtE,EAAK+C,SAAU,MAPjB,gDAWNmB,aAAY,kBAAM,EAAKnB,SAAU,KACjCe,QAAQC,IAAR,MAZM,yDAjFA,2DAiGd1C,cAjGc,uCAiGE,WAAOC,GAAP,SAAAtD,EAAA,6DACZ,EAAK+E,SAAU,EADH,kBAGFrD,EAAMkB,SAASS,cAAcC,GAH3B,OAIR4C,aAAY,WAAO,IAAD,EACV5C,EAAQkB,aAAelB,EAAQkB,eAAR,UAAwB7E,EAAMwG,UAAU3D,YAAxC,aAAwB,EAAsBgC,cACrE7E,EAAMwG,UAAUyD,eAAetG,EAAQkB,aAE3C,EAAKlB,QAAL,2BAAmB,EAAKA,SAAYA,GACpC,EAAKyB,SAAU,KATX,gDAYRe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAbzB,yDAjGF,2DAkHdxB,gBAlHc,uCAkHI,WAAOV,EAAkB2E,GAAzB,SAAAxH,EAAA,6DACd,EAAK+E,SAAU,EADD,kBAGJrD,EAAMkB,SAASW,gBAAgBV,GAH3B,OAIVlD,EAAMkK,cAActC,wBAAwB1E,GAC5CqD,aAAY,WAAO,IAAD,IACV,EAAK5C,SAAW,EAAKA,QAAQT,YAAb,UAA0BlD,EAAMwG,UAAU3D,YAA1C,aAA0B,EAAsBK,WAAY,EAAKS,QAAQT,WAAaA,IACtG2E,EAAY,EAAKlE,QAAQmE,iBAAmB,EAAKnE,QAAQmE,iBACzD,EAAKnE,QAAQkE,WAAa,EAAKlE,QAAQkE,WAEvC,EAAKlE,SAAW,EAAKA,QAAQT,YAAb,UAA0BlD,EAAMwG,UAAU3D,YAA1C,aAA0B,EAAsBK,YAChE2E,EAAY,EAAKlE,QAAQwG,iBAAmB,EAAKxG,QAAQwG,kBAE7D,EAAKd,WAAWzD,SAAQ,SAAAjC,GAChBA,EAAQT,WAAaA,IACrBS,EAAQkE,UAAYlE,EAAQmE,iBAAmBnE,EAAQmE,iBACvDnE,EAAQkE,WAAalE,EAAQkE,cAGrC,EAAKzC,SAAU,KAnBT,gDAsBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAvBvB,yDAlHJ,6DA6IdgF,eA7Ic,uCA6IG,WAAOtG,GAAP,eAAAzD,EAAA,6DACb,EAAKiJ,mBAAoB,EADZ,kBAGgBvH,EAAMkB,SAASY,eAAe,EAAKF,QAAST,SAAUY,GAHtE,OAGHuF,EAHG,OAIT9C,aAAY,WACR,EAAK8C,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDASTnD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK+C,mBAAoB,KAVlC,yDA7IH,2DA2Jde,mBA3Jc,uCA2JO,WAAOnH,EAAkBY,GAAzB,eAAAzD,EAAA,6DACjB,EAAKoJ,mBAAoB,EADR,kBAGY1H,EAAMkB,SAASc,eAAeb,EAAUY,GAHpD,OAGPkF,EAHO,OAIbzC,aAAY,WACR,EAAKiD,eAAiBR,EACtB,EAAKS,mBAAoB,KANhB,gDASbtD,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKkD,mBAAoB,KAXhB,yDA3JP,wDACVzB,YAAmB7I,MAEnB8I,aACI,kBAAM,EAAKsB,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAMzF,EAA0B,IAAdyF,EAAkB,YAAc,YAClD,EAAKa,eAAetG,QAEpB,EAAKuF,WAAa,M,+CAUlC,WACI,SAAIrJ,EAAMwG,UAAU3D,OAAQ1D,KAAKwE,UACtB3D,EAAMwG,UAAU3D,KAAKK,WAAa/D,KAAKwE,QAAQT,a,KChC7CoH,E,WAKjB,aAAe,IAAD,gCAJdzH,KAAoB,KAIN,KAHd0H,cAA+B,KAGjB,KAFdC,WAAY,EAEE,KAQd5H,MARc,uCAQN,WAAO6H,GAAP,eAAApK,EAAA,+EAEmB0B,EAAMW,QAAQE,MAAM6H,GAFvC,OAEM5H,EAFN,OAGA7C,EAAMC,YAAYyK,SAAS7H,EAAK9C,OAChCwG,aAAY,kBAAM,EAAK1D,KAAOA,KAC9B/B,GAAQC,KAAK,eACbf,EAAM2K,WAAWC,aANjB,uHARM,2DAoBdC,OAAS,WACL7K,EAAMC,YAAYyK,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAKnI,KAAO,KACZ/B,GAAQC,KAAK,MAxBH,KA2BdkK,QA3Bc,sBA2BJ,4BAAA5K,EAAA,+EAEiB0B,EAAMW,QAAQC,UAF/B,OAEIE,EAFJ,OAGF0D,aAAY,kBAAM,EAAK1D,KAAOA,KAH5B,gDAKFsD,QAAQC,IAAR,MALE,yDA3BI,KAoCd8E,SApCc,uCAoCH,WAAOT,GAAP,eAAApK,EAAA,+EAEgB0B,EAAMW,QAAQI,UAAU2H,GAFxC,OAEG5H,EAFH,OAGH7C,EAAMC,YAAYyK,SAAS7H,EAAK9C,OAChCwG,aAAY,kBAAM,EAAK1D,KAAOA,KAC9B/B,GAAQC,KAAK,eACbf,EAAM2K,WAAWC,aANd,uHApCG,2DAgDdb,SAAW,SAACjF,GACJ,EAAKjC,OAAM,EAAKA,KAAKiC,MAAQA,IAjDvB,KAoDdmF,eAAiB,SAACkB,GACV,EAAKtI,OAAM,EAAKA,KAAKgC,YAAcsG,IArD7B,KAwDdC,uBAxDc,sBAwDW,sBAAA/K,EAAA,sDACrByK,OAAOO,GAAGC,gBAAe,SAAAlL,GACG,cAApBA,EAASK,SACT,EAAK8J,cAAgBnK,EAASmL,aAAavI,gBAH9B,2CAxDX,KAgEdwI,cAAgB,WACZ,EAAKhB,WAAY,EACjB,IAAMiB,EAAW,SAACzI,GACdjB,EAAMW,QAAQK,QAAQC,GAAatB,MAAK,SAAAmB,GACpC7C,EAAMC,YAAYyK,SAAS7H,EAAK9C,OAChCwG,aAAY,WACR,EAAK1D,KAAOA,EACZ,EAAK2H,WAAY,KAErB1J,GAAQC,KAAK,kBACd2K,OAAM,SAAAlL,GACL2F,QAAQC,IAAI5F,GACZ+F,aAAY,kBAAM,EAAKiE,WAAY,SAGvC,EAAKD,cACLkB,EAAS,EAAKlB,eAEdO,OAAOO,GAAGzI,OAAM,SAAAxC,GACZqL,EAASrL,EAASmL,aAAavI,eAChC,CAAC2I,MAAO,0BAnFf3D,YAAmB7I,M,4CAGvB,WACI,QAASA,KAAK0D,S,KCCT7C,EAAe,CACxBkK,cAAe,IAAInF,EACnB9E,YAAa,ICXb,aAAe,IAAD,gCAJdO,MAA4B,KAId,KAHdT,MAAuB+K,OAAOC,aAAaa,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAed1K,eAAiB,SAACX,GACd,EAAKA,MAAQA,GAhBH,KAmBdkK,SAAW,SAAC3K,GACR,EAAKA,MAAQA,GApBH,KAuBd+L,aAAe,WACX,EAAKD,WAAY,GAvBjB7D,YAAmB7I,MAEnB8I,aACI,kBAAM,EAAKlI,SACX,SAAAA,GACQA,EACA+K,OAAOC,aAAagB,QAAQ,MAAOhM,GAEnC+K,OAAOC,aAAaC,WAAW,WDG/CxE,UAAW,IAAI8D,EACfK,WAAY,IERZ,aAAe,IAAD,gCALdqB,MAAe,CACXC,MAAM,EACNtK,KAAM,MAGI,KAIduK,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMrK,KAAOwK,GANR,KASdvB,WAAa,WACT,EAAKoB,MAAMC,MAAO,EAClB,EAAKD,MAAMrK,KAAO,MAVlBqG,YAAmB7I,OFQvBiN,aAAc,IAAIlD,EAClBmD,aAAc,IGdd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACfzM,EAAMkK,cAAchF,mBACpB,EAAKqH,eAAgB,IAAIG,KACpBC,QAAQjN,oBAAkD+M,EAAY,CACnEG,mBAAoB,kCAAM5M,EAAMwG,UAAU3D,YAAtB,aAAM,EAAsB9C,SAEnD8M,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQxB,OAAM,SAAAlL,GAAK,OAAI2F,QAAQC,IAAI,uCAAwC5F,MAE9F,EAAK+L,cAAcY,GAAG,gBAAgB,SAACb,GACnC/F,aAAY,WACR+F,EAAS1G,SAAQ,SAAAwH,GACbA,EAAQC,UAAY,IAAIpG,KAAKmG,EAAQC,UAAY,QAErD,EAAKf,SAAWA,QAIxB,EAAKC,cAAcY,GAAG,kBAAkB,SAACC,GACrC7G,aAAY,WACR6G,EAAQC,UAAY,IAAIpG,KAAKmG,EAAQC,WACrC,EAAKf,SAASgB,QAAQF,WA5BxB,KAkCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKhB,qBAAL,SAAoBiB,OAAO9B,OAAM,SAAAlL,GAAK,OAAI2F,QAAQC,IAAI,+BAAgC5F,OAnC5E,KAsCdiN,cAAgB,WACZ,EAAKnB,SAAW,GAChB,EAAKiB,qBAxCK,KA2CdG,WA3Cc,uCA2CD,WAAOjF,GAAP,iBAAApI,EAAA,6DACToI,EAAOgE,WAAP,UAAoBzM,EAAMkK,cAAchF,wBAAxC,aAAoB,EAAsC7C,GADjD,4BAGC,EAAKkK,qBAHN,aAGC,EAAoBoB,OAAO,cAAelF,GAH3C,sDAKLtC,QAAQC,IAAR,MALK,wDA3CC,sDACV4B,YAAmB7I,QHgBdyO,EAAeC,wBAAc7N,GAEnC,SAAS8N,IACZ,OAAOC,qBAAWH,G,WIvBPI,eAAS,WAAmB,IAAD,EACFF,IAA7BtH,UAAY3D,EADmB,EACnBA,KAAMgI,EADa,EACbA,OACzB,OACI,cAACoD,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAACC,QAAM,EAA3C,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAACC,YAAa,UADhE,kBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAcrD,KAAK,eAC9C,cAAC8C,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAUrD,KAAK,WAC1C,cAAC8C,EAAA,EAAKI,KAAN,UACI,cAACU,EAAA,EAAD,CAAQT,GAAIC,IAASC,GAAG,kBAAkBQ,UAAQ,EAAC7C,QAAQ,sBAE/D,eAAC8B,EAAA,EAAKI,KAAN,CAAWY,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOP,KAAS,OAAJ9L,QAAI,IAAJA,OAAA,EAAAA,EAAMiC,QAAS,mBAAoBqK,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAE1M,QAAF,IAAEA,OAAF,EAAEA,EAAMgC,YAA1C,SACI,eAACwK,EAAA,EAASpB,KAAV,WACA,cAACoB,EAAA,EAAShB,KAAV,CAAeC,GAAIkB,IAAMhB,GAAE,2BAAe3L,QAAf,IAAeA,OAAf,EAAeA,EAAMK,UAC5CqM,KAAK,aAAaE,KAAK,SAC3B,cAACJ,EAAA,EAAShB,KAAV,CAAeqB,QAAS7E,EAAQ0E,KAAK,SAASE,KAAK,0B,qECf5D,SAASE,EAAYC,GAAe,IAAD,EACxBC,YAASD,EAAMzE,MADS,mBACvC2E,EADuC,KAChCC,EADgC,KAE9C,OACI,eAACC,EAAA,EAAKC,MAAN,CAAYzP,MAAOuP,EAAKG,WAAaH,EAAKvP,MAA1C,UACI,gCAAQoP,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAKvP,MAClB,cAAC4P,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAKvP,QAC/B,QCZDwN,oBAAS,WAAsB,IACnCxH,EAAasH,IAAbtH,UACP,OACI,cAAC,IAAD,CACI+J,cAAe,CAACC,MAAO,GAAIC,SAAU,GAAIjQ,MAAO,MAChDkQ,SAAU,SAACjI,EAAD,OAAUkI,EAAV,EAAUA,UAAV,OAAyBnK,EAAU5D,MAAM6F,GAAQiD,OAAM,SAAAlL,GAAK,OAC9DmQ,EAAU,CAACnQ,MAAO,kCAH9B,SAKK,gBAAEoQ,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAcjQ,EAA9B,EAA8BA,OAA9B,OACG,eAACoP,EAAA,EAAD,CAAMc,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACC,EAAA,EAAD,CAAQ1C,GAAG,KAAKnC,QAAQ,uBAAuBmE,MAAM,OAAOW,UAAU,WACtE,cAACtB,EAAD,CAAaxE,KAAK,QAAQ+F,YAAY,UACtC,cAACvB,EAAD,CAAaxE,KAAK,WAAW+F,YAAY,WAAWC,KAAK,aACzD,cAAC,IAAD,CACIhG,KAAK,QAAQiG,OAAQ,kBACrB,cAAChB,EAAA,EAAD,CAAOvB,MAAO,CAACwC,aAAc,IAAKhB,OAAK,EAACC,MAAM,MAAMnE,QAASvL,EAAOJ,WAExE,cAACuO,EAAA,EAAD,CAAQ3J,QAASyL,EAAc7B,UAAQ,EAAC7C,QAAQ,QAAQgF,KAAK,SAASG,OAAK,a,mBCjBhF,SAASC,GAAT,GAA0C,IAAhB3Q,EAAe,EAAfA,OACrC,OACI,cAAC4Q,GAAA,EAAD,CAAShR,OAAK,EAAd,SACKI,GACG,cAAC4Q,GAAA,EAAQC,KAAT,UACK7Q,EAAO8Q,KAAI,SAACC,EAAUC,GAAX,OACR,cAACJ,GAAA,EAAQnD,KAAT,UAAuBsD,GAAJC,UCJ5B5D,oBAAS,WAAsB,IACnCxH,EAAasH,IAAbtH,UACP,OACI,cAAC,IAAD,CACI+J,cAAe,CAAC1L,YAAa,GAAI3B,SAAU,GAAIsN,MAAO,GAAIC,SAAU,GAAIjQ,MAAO,MAC/EkQ,SAAU,SAACjI,EAAD,OAAUkI,EAAV,EAAUA,UAAV,OAAyBnK,EAAU0E,SAASzC,GAAQiD,OAAM,SAAAlL,GAAK,OACrEmQ,EAAU,CAACnQ,cACfqR,iBAAkBC,KAAW,CACzBjN,YAAaiN,OAAaC,WAC1B7O,SAAU4O,OAAaC,WACvBvB,MAAOsB,OAAaC,WAAWvB,QAC/BC,SAAUqB,OAAaC,aAR/B,SAWK,gBAAEnB,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAcjQ,EAA9B,EAA8BA,OAAQoR,EAAtC,EAAsCA,QAASC,EAA/C,EAA+CA,MAA/C,OACG,eAACjC,EAAA,EAAD,CAAMc,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAACC,EAAA,EAAD,CAAQ1C,GAAG,KAAKnC,QAAQ,yBAAyBmE,MAAM,OAAOW,UAAU,WACxE,cAACtB,EAAD,CAAaxE,KAAK,cAAc+F,YAAY,iBAC5C,cAACvB,EAAD,CAAaxE,KAAK,WAAW+F,YAAY,aACzC,cAACvB,EAAD,CAAaxE,KAAK,QAAQ+F,YAAY,UACtC,cAACvB,EAAD,CAAaxE,KAAK,WAAW+F,YAAY,WAAWC,KAAK,aACzD,cAAC,IAAD,CACIhG,KAAK,QAAQiG,OAAQ,kBACrB,cAACG,GAAD,CAAkB3Q,OAAQA,EAAOJ,WAErC,cAACuO,EAAA,EAAD,CAAQmD,UAAWF,IAAYC,GAASpB,EACpCzL,QAASyL,EAAc7B,UAAQ,EAAC7C,QAAQ,WAAWgF,KAAK,SAASG,OAAK,aC3B/EtD,gBAAS,WAAqB,IAAD,EACNF,IAA1BtH,EADgC,EAChCA,UAAWmE,EADqB,EACrBA,WACnB,OACI,cAACwH,EAAA,EAAD,CAASjE,UAAQ,EAAC+C,UAAU,SAASmB,UAAQ,EAACtB,UAAU,WAAxD,SACI,eAAC1C,EAAA,EAAD,CAAWmB,MAAI,EAAf,UACI,eAACyB,EAAA,EAAD,CAAQ1C,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACgB,EAAA,EAAD,CAAOmD,KAAK,UAAU1D,IAAI,mBAAmBC,IAAI,OAAO0D,OAAQ,CAACjB,aAAc,MADnF,kBAIC7K,EAAU+L,WACP,qCACI,cAACvB,EAAA,EAAD,CAAQ1C,GAAG,KAAKJ,UAAQ,EAAC/B,QAAQ,2BACjC,cAAC4C,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAc6D,KAAK,OAAOnE,UAAQ,EAAvD,kCAMA,qCACI,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAM/E,EAAWuB,UAAU,cAAC,GAAD,MAAgBmG,KAAK,OAAOnE,UAAQ,EAAhF,mBAGA,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAM/E,EAAWuB,UAAU,cAACsG,GAAD,MAAmBH,KAAK,OAAOnE,UAAQ,EAAnF,sBAGA,cAACuE,EAAA,EAAD,CAASC,YAAU,EAACxE,UAAQ,EAA5B,gBACA,cAACa,EAAA,EAAD,CACI3J,QAASoB,EAAUgE,UACnB6H,KAAK,OACLnE,UAAQ,EACRoC,MAAM,WACNnE,QAAQ,sBACRuD,QAASlJ,EAAUgF,2B,6DClCpCwC,gBAAS,WAA4B,IAAD,EACIF,IAA5C5D,cAAgBpG,EADwB,EACxBA,UAAW2B,EADa,EACbA,aAClC,OACI,qCACI,eAACwI,EAAA,EAAD,CAAMmE,UAAQ,EAACC,KAAK,QAAQxD,MAAO,CAAC8D,MAAO,OAAQC,UAAW,IAA9D,UACI,cAAC5B,EAAA,EAAD,CAAQvB,KAAK,SAASoD,UAAQ,EAACvC,MAAM,OAAOnE,QAAQ,YACpD,cAAC8B,EAAA,EAAKI,KAAN,CACIlC,QAAQ,iBACR2G,OAAQhP,EAAUiP,IAAI,OACtBrD,QAAS,kBAAMjK,EAAa,MAAO,WAEvC,cAACwI,EAAA,EAAKI,KAAN,CACIlC,QAAQ,YACR2G,OAAQhP,EAAUiP,IAAI,WACtBrD,QAAS,kBAAMjK,EAAa,UAAW,WAE3C,cAACwI,EAAA,EAAKI,KAAN,CACIlC,QAAQ,cACR2G,OAAQhP,EAAUiP,IAAI,UACtBrD,QAAS,kBAAMjK,EAAa,SAAU,cAG9C,cAACuL,EAAA,EAAD,IACA,cAAC,KAAD,CACIgC,SAAU,SAACvO,GAAD,OAAUgB,EAAa,YAAahB,IAC9CiB,MAAO5B,EAAUrC,IAAI,cAAgB,IAAIwF,a,2DCrB1C+G,gBAAS,YAAwC,IAAD,EAAhBrK,EAAgB,EAAhBA,QAAgB,EACzBmK,IAA3B1B,EADoD,EACpDA,aAAc5F,EADsC,EACtCA,UACd5C,EAA4BwI,EAA5BxI,gBAAiBwB,EAAWgH,EAAXhH,QAExB,IAAI,UAAAoB,EAAU3D,YAAV,eAAgBK,YAAaS,EAAQT,SAAU,OAAO,KAO1D,OACI,eAAC+P,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAACvE,MAAO,CAAC8D,MAAO,QAAvC,SACI,cAAC5D,EAAA,EAAD,CACIuC,OAAK,EACLhB,MAAM,OACNnE,QAASxI,EAAQkE,UAAY,YAAc,oBAGnD,cAACoL,GAAA,EAAOE,QAAR,CAAgBE,QAAM,EAACxE,MAAO,CAAC8D,MAAO,QAAtC,SACI,cAAC5D,EAAA,EAAD,CACIuC,OAAK,EACLjB,OAAK,EACLC,MAAO3M,EAAQkE,UAAY,MAAQ,QACnCsE,QAASxI,EAAQkE,UAAY,WAAa,SAC1CzC,QAASA,EACTsK,QAAS,SAAC4D,GAAD,OArBzB,SAAsBA,EAAmBpQ,GACrCoQ,EAAEC,iBACF5P,EAAQkE,UAAYjE,EAAgBV,GAAU,GAASU,EAAgBV,GAAU,GAmBrDsQ,CAAaF,EAAG3P,EAAQT,qBC3B7C,SAASuQ,GAAT,GAAuC,IAAjB9P,EAAgB,EAAhBA,QAOjC,OACI,eAAC+P,GAAA,EAAD,CAAMpF,GAAIkB,IAAMhB,GAAE,oBAAe7K,EAAQT,UAAzC,UACI,cAACgM,EAAA,EAAD,CAAOP,IAAKhL,EAAQmB,OAAS,qBAC7B,eAAC4O,GAAA,EAAKP,QAAN,WACI,cAACO,GAAA,EAAK1C,OAAN,UAAcrN,EAAQkB,cACtB,cAAC6O,GAAA,EAAKC,YAAN,UAXZ,SAAkBC,GACd,GAAIA,EACA,OAAOA,EAAIC,OAAS,GAAKD,EAAIE,UAAU,EAAG,IAAM,MAAQF,EASjCG,CAASpQ,EAAQqQ,UAExC,eAACN,GAAA,EAAKP,QAAN,CAAcc,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAM/I,KAAK,SACVxH,EAAQmE,eAFb,gBAIA,cAAC,GAAD,CAAcnE,QAASA,OChBpBqK,oBAAS,YAAuD,IAApBtH,EAAmB,EAAnBA,UACjDyN,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAAC5C,GAAA,EAAD,CAAMiB,YAAU,EAAhB,SACKhM,EAAUgL,KAAI,SAAAhL,GAAS,OACpB,cAAC4N,GAAA,EAAD,CACIC,WAAS,EAETC,QACI,cAAC/C,GAAA,EAAKpD,KAAN,CAAoCC,GAAIkB,IAAMhB,GAAE,oBAAe9H,EAAUxD,UAAzE,SACI,cAACgM,EAAA,EAAD,CACImD,KAAK,OACLoC,UAAQ,EAAC9F,IAAKjI,EAAU5B,OAAS,mBACjC4P,UAAQ,EACR7F,MAAOnI,EAAUmB,UAAYsM,EAAS,QAL9BzN,EAAUxD,UAJlC,SAcI,cAACoR,GAAA,EAAMnB,QAAP,UACI,cAACM,GAAD,CAAa9P,QAAS+C,OAbrBA,EAAUxD,kBCbpB,SAASyR,GAAT,GAA8C,IAAD,IAAlBpS,EAAkB,EAAlBA,SAEtC,OACI,eAAC4P,EAAA,EAAQyC,MAAT,WACI,eAACzC,EAAA,EAAD,WACK5P,EAASoF,aACN,cAACyI,EAAA,EAAD,CAAOyC,SAAS,MAAMvC,MAAM,MAAMnE,QAAQ,YAAY0C,MAAO,CAACoC,UAAW,YAE7E,cAAC5C,GAAA,EAAKuG,MAAN,UACI,eAACvG,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYmD,KAAK,OAAOoC,UAAQ,EAAC9F,KAAK,UAAApM,EAASuE,YAAT,eAAehC,QAAS,qBAC9D,eAACuJ,GAAA,EAAK8E,QAAN,WACI,cAAC9E,GAAA,EAAK2C,OAAN,CAAa1C,GAAIkB,IAAMhB,GAAE,sBAAiBjM,EAASF,IAAnD,SACIE,EAAS+B,QAEb,eAAC+J,GAAA,EAAKsF,YAAN,wBAA4B,cAAC,IAAD,CAAMnF,GAAE,oBAAejM,EAASsE,cAAhC,mBAAiDtE,EAASuE,YAA1D,aAAiD,EAAejC,iBAC3FtC,EAASqE,QACN,cAACyH,GAAA,EAAKsF,YAAN,UACI,cAACvD,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,SAAnB,6CAKP/N,EAASkE,UAAYlE,EAASqE,QAC3B,cAACyH,GAAA,EAAKsF,YAAN,UACI,cAACvD,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,QAAnB,yDASxB,cAAC6B,EAAA,EAAD,UACI,iCACI,cAAC+B,GAAA,EAAD,CAAM/I,KAAK,UADf,IAC2BlC,YAAO1G,EAASkC,KAAO,uBAC9C,cAACyP,GAAA,EAAD,CAAM/I,KAAK,WAFf,IAE4B5I,EAASoC,WAGzC,cAACwN,EAAA,EAAD,CAAS0C,WAAS,EAAlB,SACI,cAACC,GAAD,CAA0BpO,UAAWnE,EAASmE,cAElD,eAACyL,EAAA,EAAD,CAAS4C,UAAQ,EAAjB,UACI,+BAAOxS,EAASiC,cAChB,cAACuK,EAAA,EAAD,CACIT,GAAIkB,IACJhB,GAAE,sBAAiBjM,EAASF,IAC5BiO,MAAM,OACN0E,QAAQ,QACR7I,QAAQ,eCtDb6B,oBAAS,WAAwB,IAErCiH,EADiBnH,IAAjB5D,cACA+K,kBAEP,OACI,mCACKA,EAAkBvD,KAAI,mCAAEwD,EAAF,KAASlM,EAAT,YACnB,eAAC,WAAD,WACI,cAACgI,EAAA,EAAD,CAAQmE,KAAG,EAAC7E,MAAM,OAAlB,SACK4E,IAEAlM,EAAW0I,KAAI,SAAAnP,GAAQ,OACpB,cAACoS,GAAD,CAAoCpS,SAAUA,GAAvBA,EAASF,SAL7B6S,W,UCVhB,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAa/D,OAAK,EAACzC,MAAO,CAAE+D,UAAW,IAAvC,SACI,eAACT,EAAA,EAAQyC,MAAT,WACI,cAACzC,EAAA,EAAD,CAAStD,MAAO,CAAEyG,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAYrE,OAAb,CAAoBlM,OAAK,EAAzB,UACI,cAACuQ,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACpD,EAAA,EAAD,UACI,eAACkD,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACpD,EAAA,EAAD,CAAS0C,WAAS,EAAChG,MAAO,CAAEyG,UAAW,MACvC,cAACnD,EAAA,EAAD,CAAS4C,UAAQ,EAAjB,SACI,cAAChG,EAAA,EAAD,CAAQmD,UAAQ,EAAC5B,MAAM,OAAO0E,QAAQ,QAAQ7I,QAAQ,kBChB/D6B,oBAAS,WAA6B,IAC1C9D,EAAiB4D,IAAjB5D,cACArE,EAAiEqE,EAAjErE,eAAgBb,EAAiDkF,EAAjDlF,iBAAkBQ,EAA+B0E,EAA/B1E,gBAAiBtG,EAAcgL,EAAdhL,WAFV,EAGVuW,oBAAS,GAHC,mBAGzCC,EAHyC,KAG5BC,EAH4B,KAehD,OAJAC,qBAAU,WACF5Q,EAAiBqN,MAAQ,GAAGxM,MACjC,CAACb,EAAiBqN,KAAMxM,IAGvB,eAACgQ,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAYnD,MAAM,KAAlB,SACKzI,EAAc7E,iBAAmBqQ,EAC9B,qCACI,cAACN,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,KAAD,CACIW,UAAW,EACXC,SArBpB,WACIL,GAAe,GACfnQ,EAAgB,IAAIpG,EAAaF,EAAY+W,YAAc,IAC3DpQ,IAAiBnE,MAAK,kBAAMiU,GAAe,OAmB3BO,SAAUR,KAAiBxW,GAAcA,EAAW+W,YAAc/W,EAAWiX,WAC7EC,aAAa,EAJjB,SAMI,cAAC,GAAD,QAIZ,cAACN,GAAA,EAAD,CAAYnD,MAAM,IAAlB,SACI,cAAC,GAAD,MAEJ,cAACkD,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACI,cAAC2D,GAAA,EAAD,CAAQxD,OAAQ4C,Y,UCzCjB,SAASa,GAAT,GAA2E,IAAD,IAA/CrI,gBAA+C,aAA9B/B,eAA8B,MAApB,aAAoB,EACrF,OACI,cAACqK,GAAA,EAAD,CAAQ1D,QAAQ,EAAM5E,SAAUA,EAAhC,SACI,cAACoI,GAAA,EAAD,CAAQnK,QAASA,M,cCAd,SAASsK,GAAW7G,GAAe,IAAD,EACvBC,YAASD,EAAMzE,MADQ,mBACtC2E,EADsC,KAC/BC,EAD+B,KAE7C,OACI,eAACC,EAAA,EAAKC,MAAN,CAAYzP,MAAOuP,EAAKG,WAAaH,EAAKvP,MAA1C,UACI,gCAAQoP,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAKvP,MAClB,cAAC4P,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAKvP,QAC/B,Q,cCRD,SAASkW,GAAc9G,GAAe,IAAD,EACjBC,YAASD,EAAMzE,MADE,mBACzC2E,EADyC,KAClCC,EADkC,KAC5B4G,EAD4B,KAEhD,OACI,eAAC3G,EAAA,EAAKC,MAAN,CAAYzP,MAAOuP,EAAKG,WAAaH,EAAKvP,MAA1C,UACI,gCAAQoP,EAAMO,QACd,cAACyG,GAAA,EAAD,CACIC,WAAS,EACTC,QAASlH,EAAMkH,QACfpR,MAAOoK,EAAMpK,OAAS,KACtBsN,SAAU,SAACM,EAAGyD,GAAJ,OAAUJ,EAAQK,SAASD,EAAErR,QACvCuR,OAAQ,kBAAMN,EAAQO,YAAW,IACjChG,YAAatB,EAAMsB,cAEtBnB,EAAKG,SAAWH,EAAKvP,MAClB,cAAC4P,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAKvP,QAC/B,QC1BT,IAAM2W,GAAkB,CAC3B,CAAC5H,KAAM,SAAU7J,MAAO,UACxB,CAAC6J,KAAM,UAAW7J,MAAO,WACzB,CAAC6J,KAAM,OAAQ7J,MAAO,QACtB,CAAC6J,KAAM,OAAQ7J,MAAO,QACtB,CAAC6J,KAAM,QAAS7J,MAAO,SACvB,CAAC6J,KAAM,SAAU7J,MAAO,W,qBCDb,SAAS0R,GAAYxH,GAAuC,IAAD,EACvCC,YAASD,EAAMzE,MADwB,mBAC/D2E,EAD+D,KACxDC,EADwD,KAClD4G,EADkD,KAEtE,OACI,eAAC3G,EAAA,EAAKC,MAAN,CAAYzP,MAAOuP,EAAKG,WAAaH,EAAKvP,MAA1C,UACI,cAAC,KAAD,uCACQsP,GACAF,GAFR,IAGIyH,SAAWvH,EAAMpK,OAAS,IAAIuB,KAAK6I,EAAMpK,QAAW,KACpDsN,SAAU,SAAAtN,GAAK,OAAIiR,EAAQK,SAAStR,OAEvCqK,EAAKG,SAAWH,EAAKvP,MAClB,cAAC4P,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAKvP,QAC/B,QCADwN,oBAAS,WACpB,IAAMlN,EAAUwW,cACTpN,EAAiB4D,IAAjB5D,cACA/C,EACiC+C,EADjC/C,eAAgBG,EACiB4C,EADjB5C,eACfjB,EAAgC6D,EAAhC7D,aAAchB,EAAkB6E,EAAlB7E,eACfhD,EAAMkV,cAANlV,GALoC,EAOXoT,mBAA6B,IAAIrR,GAPtB,mBAOpC7B,EAPoC,KAO1ByD,EAP0B,KASrC6L,EAAmBC,KAAW,CAChCxN,MAAOwN,OAAaC,SAAS,kCAC7BvN,YAAasN,OAAaC,SAAS,wCACnCxN,SAAUuN,OAAaC,WACvBtN,KAAMqN,OAAaC,SAAS,oBAAoByF,WAChD7S,MAAOmN,OAAaC,WACpBrN,KAAMoN,OAAaC,aAoBvB,OAjBA6D,qBAAU,WACFvT,GAAIgE,EAAahE,GAAIX,MAAK,SAAAa,GAAQ,OAAIyD,EAAY,IAAI5B,EAAmB7B,SAC9E,CAACF,EAAIgE,IAeJhB,EAAuB,cAACkR,GAAD,CAAkBpK,QAAQ,wBAGjD,eAACgG,EAAA,EAAD,CAAS4C,UAAQ,EAAjB,UACI,cAAC/D,EAAA,EAAD,CAAQ7E,QAAQ,mBAAmBgJ,KAAG,EAAC7E,MAAM,SAC7C,cAAC,IAAD,CACIuB,iBAAkBA,EAClB4F,oBAAkB,EAClBlH,cAAehO,EACfmO,SAAU,SAAAjI,GAAM,OAtB5B,SAA0BlG,GACtB,GAAKA,EAASF,GAOViF,EAAe/E,GAAUb,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BwB,EAASF,YAP3D,CACd,IAAIgF,EAAW,2BACR9E,GADQ,IAEXF,GAAIqV,iBAERvQ,EAAeE,GAAa3F,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BsG,EAAYhF,SAgBvDsV,CAAiBlP,IAJzC,SAKK,gBAAGmI,EAAH,EAAGA,aAAcoB,EAAjB,EAAiBA,QAASnB,EAA1B,EAA0BA,aAAcoB,EAAxC,EAAwCA,MAAxC,OACG,eAAC,IAAD,CAAMnB,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACpB,EAAD,CAAaxE,KAAK,QAAQ+F,YAAY,UACtC,cAACuF,GAAD,CAAYmB,KAAM,EAAG1G,YAAY,cAAc/F,KAAK,gBACpD,cAACuL,GAAD,CAAeI,QAASK,GAAiBjG,YAAY,WAAW/F,KAAK,aACrE,cAACiM,GAAD,CACIS,gBAAgB,OAChB1M,KAAK,OACL2M,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEf,cAAChH,EAAA,EAAD,CAAQ7E,QAAQ,mBAAmBgJ,KAAG,EAAC7E,MAAM,SAC7C,cAACX,EAAD,CAAauB,YAAY,OAAO/F,KAAK,SACrC,cAACwE,EAAD,CAAauB,YAAY,QAAQ/F,KAAK,UACtC,cAAC4D,EAAA,EAAD,CACImD,SAAUrB,IAAiBoB,IAAUD,EACrC5M,QAASyL,EAAcmE,QAAQ,QAC/BhG,UAAQ,EAACmC,KAAK,SAAShF,QAAQ,WACnC,cAAC4C,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAcwG,QAAQ,QAAQ7D,KAAK,SAAShF,QAAQ,uB,oBCnElF6B,gBAAS,YAAoD,IAArBvB,EAAoB,EAApBA,WAC5CJ,EAAgByB,IAAhBzB,aAWP,OATAuJ,qBAAU,WAIN,OAHInJ,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaoB,mBAElB,CAACpB,EAAcI,IAGd,qCACI,cAAC0F,EAAA,EAAD,CACIlB,UAAU,SACV4B,SAAS,MACT3E,UAAQ,EACRoC,MAAM,OACNzB,MAAO,CAACoJ,OAAQ,QALpB,SAOI,cAACjH,EAAA,EAAD,sCAEJ,eAACmB,EAAA,EAAD,CAASU,UAAQ,EAACkC,UAAQ,EAA1B,UACI,cAAC,IAAD,CACIrE,SAAU,SAACjI,EAAD,OAAWyP,EAAX,EAAWA,UAAX,OACN7L,EAAaqB,WAAWjF,GAAQ/G,MAAK,kBAAMwW,QAC/C3H,cAAe,CAAE5O,KAAM,IACvBkQ,iBAAkBC,KAAW,CACzBnQ,KAAMmQ,OAAaC,aAL3B,SAQS,gBAAElB,EAAF,EAAEA,aAAcmB,EAAhB,EAAgBA,QAASpB,EAAzB,EAAyBA,aAAzB,OACG,cAAC,IAAD,CAAME,UAAU,UAAhB,SACI,cAAC,IAAD,CAAO3F,KAAK,OAAZ,SACK,SAACyE,GAAD,OACG,sBAAKf,MAAO,CAACI,SAAU,YAAvB,UACI,cAACqH,GAAA,EAAD,CAAQxD,OAAQjC,IAChB,kDACIK,YAAY,mEACZ0G,KAAM,GACFhI,EAAME,OAHd,IAIIqI,WAAY,SAAA7E,GACM,UAAVA,EAAErS,KAAmBqS,EAAE8E,UAGb,UAAV9E,EAAErS,KAAoBqS,EAAE8E,WACxB9E,EAAEC,iBACFvB,GAAWpB,oBAUnD,cAACyH,GAAA,EAAQzD,MAAT,UACKvI,EAAaC,SAASoF,KAAI,SAAAtE,GAAO,OAC9B,eAACiL,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgB3J,IAAKvB,EAAQtI,OAAS,qBACtC,eAACuT,GAAA,EAAQlF,QAAT,WACI,cAACkF,GAAA,EAAQE,OAAT,CAAgBjK,GAAIkB,IAAMhB,GAAE,oBAAepB,EAAQlK,UAAnD,SACKkK,EAAQvI,cAEb,cAACwT,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoBrL,EAAQC,WAAlC,YAEJ,cAACgL,GAAA,EAAQK,KAAT,CAAc7J,MAAO,CAAC8J,WAAY,YAAlC,SAAgDvL,EAAQzL,YATlDyL,EAAQ/K,kBClExCuW,GAAqB,CACvBnR,OAAQ,mBAGNoR,GAAyB,CAC3B5J,SAAU,WACV6J,OAAQ,KACRC,KAAM,KACNpG,MAAO,OACPqG,OAAQ,OACR1I,MAAO,SAOItC,gBAAU,YAAoD,IAAD,IAAlBzL,EAAkB,EAAlBA,SAAkB,EACGuL,IAApE5D,cAAgB1C,EADiD,EACjDA,iBAAkBpC,EAD+B,EAC/BA,QAASsC,EADsB,EACtBA,qBAClD,OACI,eAACyK,EAAA,EAAQyC,MAAT,WACI,eAACzC,EAAA,EAAD,CAAS9B,OAAK,EAACwC,SAAS,MAAMhE,MAAO,CAACoK,QAAS,KAA/C,UACK1W,EAASoF,aACN,cAACyI,EAAA,EAAD,CAAOvB,MAAO,CAACI,SAAU,WAAYiK,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAC/DC,QAAM,EAAC9I,MAAM,MAAMnE,QAAQ,cAEnC,cAAC+C,EAAA,EAAD,CAAOP,IAAG,iCAA4BpM,EAASgC,SAArC,QAAqD+M,OAAK,EAACzC,MAAO+J,KAC5E,cAACzG,EAAA,EAAD,CAAStD,MAAOgK,GAAwBxI,OAAK,EAA7C,SACI,cAAChC,GAAA,EAAKuG,MAAN,UACI,cAACvG,GAAA,EAAD,UACI,eAACA,GAAA,EAAK8E,QAAN,WACI,cAACnC,EAAA,EAAD,CACIqB,KAAK,OACLlG,QAAS5J,EAAS+B,MAClBuK,MAAO,CAACyB,MAAO,WAEnB,4BAAIrH,YAAO1G,EAASkC,KAAO,iBAC3B,2CACc,iCAAQ,cAAC,IAAD,CAAM+J,GAAE,8BAAejM,EAASuE,YAAxB,aAAe,EAAe5D,UAAtC,mBAAmDX,EAASuE,YAA5D,aAAmD,EAAejC,+BAO5G,cAACsN,EAAA,EAAD,CAAS4C,UAAQ,EAAClC,SAAS,SAA3B,SACKtQ,EAASqE,OACN,qCACI,cAACmI,EAAA,EAAD,CACIuB,MAAO/N,EAASoF,YAAc,QAAU,MACxCqN,QAAQ,OACR3E,OAAK,EACLlE,QAAS5J,EAASoF,YAAc,uBAAyB,kBACzD+H,QAAShI,EACTtC,QAASA,IAEb,cAAC2J,EAAA,EAAD,CAAQT,GAAIkB,IACR0C,SAAU3P,EAASoF,YACnB6G,GAAE,kBAAajM,EAASF,IACxBiO,MAAM,SACN0E,QAAQ,QAJZ,6BAQJzS,EAASkE,QACT,cAACsI,EAAA,EAAD,CAAQ3J,QAASA,EAASsK,QAASlI,EAAnC,+BAEA,cAACuH,EAAA,EAAD,CAAQmD,SAAU3P,EAASoF,YACvBvC,QAASA,EAASsK,QAASlI,EAAkB8I,MAAM,OADvD,mCCjELtC,gBAAS,YAAkD,IAAnBzL,EAAkB,EAAlBA,SACnD,OACI,eAAC4P,EAAA,EAAQyC,MAAT,WACI,cAACzC,EAAA,EAAD,CAASU,SAAS,MAAlB,SACI,eAACgD,GAAA,EAAD,WACI,cAACA,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,EAApB,SACI,cAACuB,GAAA,EAAD,CAAM7B,KAAK,QAAQ/B,MAAM,OAAOnF,KAAK,WAEzC,cAAC0K,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACI,4BAAIpQ,EAASiC,qBAIzB,cAAC2N,EAAA,EAAD,CAASU,UAAQ,EAAjB,SACI,eAACgD,GAAA,EAAD,CAAMwD,cAAc,SAApB,UACI,cAACxD,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,EAApB,SACI,cAACuB,GAAA,EAAD,CAAM/I,KAAK,WAAWkH,KAAK,QAAQ/B,MAAM,WAE7C,cAACuF,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACR,+BACG1J,YAAO1G,EAASkC,KAAO,gCAK1B,cAAC0N,EAAA,EAAD,CAASU,UAAQ,EAAjB,SACI,eAACgD,GAAA,EAAD,CAAMwD,cAAc,SAApB,UACI,cAACxD,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,EAApB,SACI,cAACuB,GAAA,EAAD,CAAM/I,KAAK,SAASkH,KAAK,QAAQ/B,MAAM,WAE3C,cAACuF,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACI,iCAAOpQ,EAASoC,MAAhB,KAAyBpC,EAASmC,qBC/B3CsJ,gBAAS,YAAyE,IAAD,IAArCzL,SAAWmE,EAA0B,EAA1BA,UAAWI,EAAe,EAAfA,KAC7E,OAAIJ,EAEA,qCACI,eAACyL,EAAA,EAAD,CACIlB,UAAU,SACVpC,MAAO,CAAEoJ,OAAQ,QACjBpF,SAAS,MACTgC,WAAS,EACT3G,UAAQ,EACRoC,MAAM,OANV,UAQK5J,EAAUmN,OARf,IAQ6C,IAArBnN,EAAUmN,OAAe,SAAW,SAR5D,YAUA,cAAC1B,EAAA,EAAD,CAASU,UAAQ,EAAjB,SACI,cAACpB,GAAA,EAAD,CAAM6H,SAAO,EAACC,SAAO,EAArB,SACK7S,EAAUgL,KAAI,SAAAhL,GAAS,OACpB,eAAC2H,GAAA,EAAD,CAAMQ,MAAO,CAAEI,SAAU,YAAzB,UACKvI,EAAUxD,YAAV,OAAuB4D,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAM5D,WAC9B,cAACkN,EAAA,EAAD,CACIvB,MAAO,CAAEI,SAAU,YACnBqB,MAAM,SACN8I,OAAO,QAHX,kBAOJ,cAAClK,EAAA,EAAD,CAAOmD,KAAK,OAAO1D,IAAKjI,EAAU5B,OAAS,qBAC3C,eAACuJ,GAAA,EAAK8E,QAAN,CAAckG,cAAc,SAA5B,UACI,cAAChL,GAAA,EAAK2C,OAAN,CAAa1C,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAe9H,EAAUxD,UAAjC,SAA8CwD,EAAU7B,gBAE3D6B,EAAUmB,WACX,cAACwG,GAAA,EAAKmL,MAAN,CAAY3K,MAAO,CAAEyB,MAAO,UAA5B,4BAfwC5J,EAAUxD,oBAhBpD,QCKX8K,gBAAS,WAA2B,IACxC9D,EAAiB4D,IAAjB5D,cACkB3H,EAAiE2H,EAAnFhF,iBAA4BmB,EAAuD6D,EAAvD7D,aAAchB,EAAyC6E,EAAzC7E,eAAgB0C,EAAyBmC,EAAzBnC,sBAC1D1F,EAAMkV,cAANlV,GAOP,OALAuT,qBAAU,WAEN,OADIvT,GAAIgE,EAAahE,GACd,kBAAM0F,OACd,CAAC1F,EAAIgE,EAAc0B,IAElB1C,IAAmB9C,EAAiB,cAACgU,GAAD,IAGpC,eAACV,GAAA,EAAD,WACI,eAACA,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,UACI,cAAC,GAAD,CAAwBpQ,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsBkK,WAAYlK,EAASF,QAE/C,cAACwT,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,EAApB,SACI,cAAC,GAAD,CAAyBpQ,SAAUA,YC/BpC,SAASkX,KACpB,IADiC,EAELhE,mBAAS,MAFJ,mBAE1B7U,EAF0B,KAElB+P,EAFkB,KA4BjC,OACI,qCACI,cAACK,EAAA,EAAD,CAAQ1C,GAAG,KAAKnC,QAAQ,yBACxB,cAACgG,EAAA,EAAD,UACI,eAACpD,EAAA,EAAO6F,MAAR,CAAc8E,OAAO,IAArB,UACI,cAAC3K,EAAA,EAAD,CAAQW,QA7BxB,WACIvN,IAAMV,IAAIkY,uBAA6BjO,OAAM,SAAAiG,GAAG,OAAIxL,QAAQC,IAAIuL,EAAIvR,cA4BvB+L,QAAQ,YAAYkE,OAAK,EAACuJ,SAAO,IAClE,cAAC7K,EAAA,EAAD,CAAQW,QA1BxB,WACIvN,IAAMV,IAAIkY,yBAA+BjO,OAAM,SAAAiG,GAAG,OAAIxL,QAAQC,IAAIuL,EAAIvR,cAyBvB+L,QAAQ,cAAckE,OAAK,EAACuJ,SAAO,IACtE,cAAC7K,EAAA,EAAD,CAAQW,QAXxB,WACIvN,IAAMP,KAAK+X,iBAAwB,IAAIjO,OAAM,SAAAiG,GAAG,OAAIhB,EAAUgB,OAUVxF,QAAQ,mBAAmBkE,OAAK,EAACuJ,SAAO,IAChF,cAAC7K,EAAA,EAAD,CAAQW,QAxBxB,WACIvN,IAAMV,IAAIkY,0BAAgCjO,OAAM,SAAAiG,GAAG,OAAIxL,QAAQC,IAAIuL,EAAIvR,cAuBvB+L,QAAQ,eAAekE,OAAK,EAACuJ,SAAO,IACxE,cAAC7K,EAAA,EAAD,CAAQW,QArBxB,WACIvN,IAAMV,IAAIkY,0BAAgCjO,OAAM,SAAAiG,GAAG,OAAIxL,QAAQC,IAAIuL,EAAIvR,cAoBtB+L,QAAQ,eAAekE,OAAK,EAACuJ,SAAO,IACzE,cAAC7K,EAAA,EAAD,CAAQW,QAlBxB,WACIvN,IAAMV,IAAIkY,oBAA0BjO,OAAM,SAAAiG,GAAG,OAAIxL,QAAQC,IAAIuL,OAiBjBxF,QAAQ,WAAWkE,OAAK,EAACuJ,SAAO,SAGvEhZ,GACG,cAAC2Q,GAAD,CAAiB3Q,OAAQA,OC3C1B,SAASiZ,KACpB,OACI,eAAC1H,EAAA,EAAD,CAASjB,aAAW,EAApB,UACI,eAACF,EAAA,EAAD,CAAQvB,MAAI,EAAZ,UACI,cAACyE,GAAA,EAAD,CAAM/I,KAAK,WADf,4DAIA,cAACgH,EAAA,EAAQ2H,OAAT,UACI,cAAC/K,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAcoL,SAAO,EAA1C,6CCPD5L,oBAAS,WAAwB,IAAD,IACpC/N,EAAe6N,IAAf7N,YACP,OACI,eAACmO,EAAA,EAAD,WACI,cAAC4C,EAAA,EAAD,CAAQ1C,GAAG,KAAKnC,QAAQ,iBACxB,cAAC6E,EAAA,EAAD,CAAQmE,KAAG,EAAC7G,GAAG,KAAKgC,MAAM,MAAMnE,QAAO,UAAElM,EAAYO,aAAd,aAAE,EAAmBuZ,WAC3D,UAAA9Z,EAAYO,aAAZ,eAAmB4B,UAChB,eAAC+P,EAAA,EAAD,WACI,cAACnB,EAAA,EAAD,CAAQ1C,GAAG,KAAKnC,QAAQ,cAAcmE,MAAM,SAC5C,sBAAMzB,MAAO,CAAC+D,UAAW,QAAzB,SAAmC3S,EAAYO,MAAM4B,mB,UCT1D4L,gBAAS,WAA2B,IACxCrD,EAAcmD,IAAdnD,WAEP,OACI,cAACqP,GAAA,EAAD,CAAO/N,KAAMtB,EAAWqB,MAAMC,KAAMgO,QAAStP,EAAWC,WAAYyH,KAAK,OAAzE,SACI,cAAC2H,GAAA,EAAM7G,QAAP,UACKxI,EAAWqB,MAAMrK,Y,UCEnBqM,gBAAS,YAA4C,IAAtBkM,EAAqB,EAArBA,YAAqB,EACdpM,IAA1C1B,aAAezI,EADyC,EACzCA,QAASD,EADgC,EAChCA,cAC/B,OACI,cAAC,IAAD,CACI6M,cAAe,CAAC1L,YAAW,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAASkB,YAAamP,IAAG,OAAErQ,QAAF,IAAEA,OAAF,EAAEA,EAASqQ,KACjEtD,SAAW,SAAAjI,GACP/E,EAAc+E,GAAQ/G,MAAK,WACvBwY,GAAY,OAGpBrI,iBAAkBC,KAAW,CACzBjN,YAAaiN,OAAaC,aARlC,SAWK,gBAAElB,EAAF,EAAEA,aAAcmB,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,MAAzB,OACG,eAAC,IAAD,CAAMnB,UAAU,UAAhB,UACI,cAACnB,EAAD,CAAauB,YAAY,eAAe/F,KAAK,gBAC7C,cAACsL,GAAD,CAAYmB,KAAM,EAAG1G,YAAY,eAAe/F,KAAK,QACrD,cAAC4D,EAAA,EAAD,CACIC,UAAQ,EACRmC,KAAK,SACL/L,QAASyL,EACT1E,QAAQ,iBACR6I,QAAQ,QACR9C,UAAWF,IAAYC,aC/BhCjE,gBAAS,WAAyB,IACtC5B,EAAgB0B,IAAhB1B,aACA+N,EAA0B/N,EAA1B+N,cAAexW,EAAWyI,EAAXzI,QAFsB,EAGZ8R,oBAAS,GAHG,mBAGrCtQ,EAHqC,KAG3B+U,EAH2B,KAK5C,OACI,cAACE,GAAA,EAAIC,KAAL,UACI,eAACxE,GAAA,EAAD,WACI,eAACA,GAAA,EAAKQ,OAAN,CAAa1D,MAAM,KAAnB,UACI,cAAC3B,EAAA,EAAD,CAAQgE,QAAQ,OAAOvF,KAAK,OAAOtD,QAAO,uBAAWxI,QAAX,IAAWA,OAAX,EAAWA,EAASkB,eAC7DsV,GACG,cAACpL,EAAA,EAAD,CACIiG,QAAQ,QACR3E,OAAK,EACLlE,QAAShH,EAAW,SAAW,eAC/BuK,QAAS,kBAAMwK,GAAa/U,SAIxC,cAAC0Q,GAAA,EAAKQ,OAAN,CAAa1D,MAAM,KAAnB,SACKxN,EAAW,cAAC,GAAD,CAAa+U,YAAaA,IAAkB,sBAAMrL,MAAO,CAAC8J,WAAY,YAA1B,gBAAwChV,QAAxC,IAAwCA,OAAxC,EAAwCA,EAASqQ,gBCjBvHsG,GAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAEvZ,IAAK,WAC1C,CAAEsZ,SAAU,cAAeC,KAAM,CAAEvZ,IAAK,SACxC,CAAEsZ,SAAU,UAAWC,KAAM,CAAEvZ,IAAK,aAGzB+M,gBAAS,WAA8B,IAC1C5B,EAAiB0B,IAAjB1B,aAEJ/B,EAIA+B,EAJA/B,mBACA1G,EAGAyI,EAHAzI,QACA8F,EAEA2C,EAFA3C,kBACAD,EACA4C,EADA5C,eAOJ,OACI,cAAC4Q,GAAA,EAAIC,KAAL,CAAUjV,QAASqE,EAAnB,SACI,eAACoM,GAAA,EAAD,WACI,cAACA,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACI,cAAC3B,EAAA,EAAD,CAAQgE,QAAQ,OAAOvF,KAAK,WAAWtD,QAAS,iBAEpD,eAAC0J,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,UACI,cAACyH,GAAA,EAAD,CACIE,MAAOA,GACPG,KAAM,CAAE5F,WAAW,EAAMvF,UAAU,GACnCoL,YAAa,SAACpH,EAAGrU,GAAJ,OAdT,SAACqU,EAAmBrU,GACxCoL,EAAmB1G,EAAST,SAAUoX,GAAMrb,EAAK0b,aAAuBH,KAAKvZ,KAanC2Z,CAAgBtH,EAAGrU,MAEjD,uBACA,cAACyU,GAAA,EAAKkB,MAAN,CAAYiG,YAAa,EAAzB,SACKrR,EAAekI,KAAI,SAACnP,GAAD,OAChB,eAACmR,GAAA,EAAD,CACIpF,GAAIkB,IACJhB,GAAE,sBAAiBjM,EAASF,IAFhC,UAKI,cAAC6M,EAAA,EAAD,CACIP,IAAG,iCAA4BpM,EAASgC,SAArC,QACHsK,MAAO,CAAEiM,UAAW,IAAKC,UAAW,WAExC,eAACrH,GAAA,EAAKP,QAAN,WACI,cAACO,GAAA,EAAK1C,OAAN,CAAaC,UAAU,SAAvB,SAAiC1O,EAAS+B,QAC1C,eAACoP,GAAA,EAAKsH,KAAN,CAAW/J,UAAU,SAArB,UACI,8BAAMhI,YAAO,IAAIhC,KAAK1E,EAASkC,MAAO,YACtC,8BAAMwE,YAAO,IAAIhC,KAAK1E,EAASkC,MAAO,oBAVzClC,EAASF,oBCxC/B2L,gBAAS,WAA6B,IAC1C5B,EAAgB0B,IAAhB1B,aACAzI,EAAqDyI,EAArDzI,QAAS0F,EAA4C+C,EAA5C/C,WAAYC,EAAgC8C,EAAhC9C,kBAAmBC,EAAa6C,EAAb7C,UAE/C,OACI,cAAC6Q,GAAA,EAAIC,KAAL,CAAUjV,QAASkE,EAAnB,SACI,eAACuM,GAAA,EAAD,WACI,cAACA,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACI,cAAC3B,EAAA,EAAD,CACIgE,QAAQ,OACRvF,KAAK,OACLtD,QAAuB,IAAd5C,EAAA,kCAAsC5F,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASkB,aAA/C,wBAAyElB,QAAzE,IAAyEA,OAAzE,EAAyEA,EAASkB,YAAlF,sBAEjB,cAACgR,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACI,cAACe,GAAA,EAAKkB,MAAN,CAAYiG,YAAa,EAAzB,SACKxR,EAAWqI,KAAI,SAAA/N,GAAO,OACnB,cAAC8P,GAAD,CAAoC9P,QAASA,GAA3BA,EAAQT,yB,iBCbvC,SAAS+X,GAAT,GAAgE,IAAnCC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,WACtD,OACI,cAAC,KAAD,CACIxM,IAAKuM,EACLrM,MAAO,CAACmK,OAAQ,IAAKrG,MAAO,QAC5ByI,mBAAoB,EACpBC,YAAa,EACbC,QAAQ,eACRC,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIT,EAAWS,M,cCblC,SAASC,GAAT,GAAiD,IAAnBC,EAAkB,EAAlBA,SACnCC,EAAW,CACb9D,OAAQ,kBACR+D,aAAc,OACdC,aAAc,MACdC,WAAY,OACZjL,UAAW,SACX+H,OAAQ,KAONmD,EAASC,uBAAY,SAAAC,GACvBP,EAASO,EAAc3K,KAAI,SAACtO,GAAD,OAAec,OAAOC,OAAOf,EAAM,CAC1DkY,QAASgB,IAAIC,gBAAgBnZ,WAElC,CAAC0Y,IAlBuD,EAmBPU,aAAY,CAACL,WAA1DM,EAnBoD,EAmBpDA,aAAcC,EAnBsC,EAmBtCA,cAAeC,EAnBuB,EAmBvBA,aAEpC,OACI,gDAASF,KAAT,IAAyB5N,MAAO8N,EAAY,2BAAOZ,GAZtC,CACb3H,YAAc,UAW8D2H,EAA5E,UACI,qCAAWW,MACX,cAACxI,GAAA,EAAD,CAAM/I,KAAK,SAASkH,KAAK,SACzB,cAACrB,EAAA,EAAD,CAAQ7E,QAAQ,wBCvBb,SAASyQ,GAAT,GAA2D,IAA/BxX,EAA8B,EAA9BA,QAASjC,EAAqB,EAArBA,YAAqB,EAC3CsS,mBAAc,IAD6B,mBAC9DoH,EAD8D,KACvDf,EADuD,OAEvCrG,qBAFuC,mBAE9DmG,EAF8D,KAErDT,EAFqD,KAgBrE,OANAvF,qBAAU,WACN,OAAO,WACHiH,EAAMjX,SAAQ,SAACxC,GAAD,OAAekZ,IAAIQ,gBAAgB1Z,EAAKkY,eAE3D,CAACuB,IAGA,eAAChH,GAAA,EAAD,WACI,eAACA,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,EAApB,UACI,cAAC3B,EAAA,EAAD,CAAQmE,KAAG,EAAC7E,MAAM,OAAOnE,QAAQ,uBACjC,cAAC0P,GAAD,CAAqBC,SAAUA,OAEnC,cAACjG,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,IACpB,eAACkD,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,EAApB,UACI,cAAC3B,EAAA,EAAD,CAAQmE,KAAG,EAAC7E,MAAM,OAAOnE,QAAQ,0BAChC0Q,GAASA,EAAMhJ,OAAS,GACrB,cAACoH,GAAD,CAAoBE,WAAYA,EAAYD,aAAc2B,EAAM,GAAGvB,aAG3E,cAACzF,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,IACpB,eAACkD,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,EAApB,UACI,cAAC3B,EAAA,EAAD,CAAQmE,KAAG,EAAC7E,MAAM,OAAOnE,QAAQ,8BAChC0Q,GAASA,EAAMhJ,OAAS,GACzB,qCACA,qBAAK/C,UAAU,cAAcjC,MAAO,CAACyG,UAAW,IAAKyH,SAAU,YAC/D,eAAChO,EAAA,EAAO6F,MAAR,CAAc8E,OAAQ,EAAtB,UACI,cAAC3K,EAAA,EAAD,CAAQ3J,QAASA,EAASsK,QAhC1C,WACQkM,GACAA,EAAQoB,mBAAmBC,QAAO,SAAAC,GAAI,OAAI/Z,EAAY+Z,OA8BHlO,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQmD,SAAU9M,EAASsK,QAAS,kBAAMoM,EAAS,KAAKrM,KAAK,sBCpClEzB,oBAAS,YAA0C,IAAD,EAAjBrK,EAAiB,EAAjBA,QAAiB,EAEHmK,IADnD1B,aAAe+N,EADuC,EACvCA,cAAehX,EADwB,EACxBA,YAC7BiG,EAFqD,EAErDA,UAAWhE,EAF0C,EAE1CA,QAAS5B,EAFiC,EAEjCA,aAAcC,EAFmB,EAEnBA,YAFmB,EAGrBgS,oBAAS,GAHY,mBAGtD0H,EAHsD,KAGxCC,EAHwC,OAIjC3H,mBAAS,IAJwB,mBAItD4H,EAJsD,KAI9CC,EAJ8C,KAoB7D,OACI,cAAClD,GAAA,EAAIC,KAAL,UACI,eAACxE,GAAA,EAAD,WACI,eAACA,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,UACI,cAAC3B,EAAA,EAAD,CAAQgE,QAAQ,OAAOvF,KAAK,QAAQtD,QAAQ,WAC3CgO,GACG,cAACpL,EAAA,EAAD,CAAQiG,QAAQ,QAAQ3E,OAAK,EACzBlE,QAASgR,EAAe,SAAW,YACnCzN,QAAS,kBAAM0N,GAAiBD,SAI5C,cAACtH,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACKwK,EACG,cAACP,GAAD,CAAmBzZ,YA5BvC,SAA2BC,GACvBD,EAAYC,GAAM1B,MAAK,kBAAM0b,GAAgB,OA2BsBhY,QAASgE,IAExD,cAACsK,GAAA,EAAKkB,MAAN,CAAYiG,YAAa,EAAzB,mBACKlX,EAAQkG,cADb,aACK,EAAgB6H,KAAI,SAAA9H,GAAK,OACtB,eAAC8J,GAAA,EAAD,WACI,cAACxE,EAAA,EAAD,CAAOP,IAAK/E,EAAMpI,MACjB2Y,GACG,eAACpL,EAAA,EAAO6F,MAAR,CAActD,OAAK,EAACoI,OAAQ,EAA5B,UACI,cAAC3K,EAAA,EAAD,CACIsB,OAAK,EACLC,MAAM,QACNnE,QAAQ,OACRhB,KAAM,OAASvB,EAAMvH,GACrB6P,SAAUtI,EAAME,OAChB1E,QAAWiY,IAAW,OAASzT,EAAMvH,IAAM+C,EAC3CsK,QAAS,SAAA4D,GAAC,OAvC1D,SAA4B1J,EAAc0J,GACtCgK,EAAUhK,EAAEiK,cAAcpS,MAC1B3H,EAAaoG,GAqC6C4T,CAAmB5T,EAAO0J,MAE5C,cAACvE,EAAA,EAAD,CACIsB,OAAK,EACLC,MAAM,MACNb,KAAK,QACLrK,QAAWiY,IAAWzT,EAAMvH,IAAM+C,EAClCsK,QAAS,SAAA4D,GAAC,OAzC1D,SAA2B1J,EAAc0J,GACrCgK,EAAUhK,EAAEiK,cAAcpS,MAC1B1H,EAAYmG,GAuC8C6T,CAAkB7T,EAAO0J,IACvCpB,SAAUtI,EAAME,OAChBqB,KAAMvB,EAAMvH,UApBjBuH,EAAMvH,mBClCtC2L,gBAAS,YAA2C,IAAlBrK,EAAiB,EAAjBA,QACtCyI,EAAgB0B,IAAhB1B,aAEDkO,EAAQ,CACV,CAACC,SAAU,QAASnJ,OAAQ,kBAAM,cAAC,GAAD,MAClC,CAACmJ,SAAU,SAAUnJ,OAAQ,kBAAM,cAAC,GAAD,CAAezN,QAASA,MAC3D,CAAC4W,SAAU,SAAUnJ,OAAQ,kBAAM,cAAC,GAAD,MACnC,CAACmJ,SAAU,YAAanJ,OAAQ,kBAAM,cAAC,GAAD,MACtC,CAACmJ,SAAU,YAAanJ,OAAQ,kBAAM,cAAC,GAAD,OAG1C,OACI,cAACgJ,GAAA,EAAD,CACIK,KAAM,CAACnJ,OAAO,EAAMc,UAAU,GAC9BsL,aAAa,QACbpD,MAAOA,EACPI,YAAa,SAACpH,EAAGrU,GAAJ,OAAamN,EAAa1C,aAAazK,EAAK0b,mB,UCrBtD3M,gBAAS,YAA0C,IAAlBrK,EAAiB,EAAjBA,QAC5C,OACI,cAACwO,EAAA,EAAD,UACI,eAAC0D,GAAA,EAAD,WACI,cAACA,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACI,cAACtE,GAAA,EAAKuG,MAAN,UACI,eAACvG,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYC,QAAM,EAACkD,KAAK,QAAQ1D,IAAKhL,EAAQmB,OAAS,qBACtD,cAACuJ,GAAA,EAAK8E,QAAN,CAAckG,cAAc,SAA5B,SACI,cAACrI,EAAA,EAAD,CAAQ1C,GAAG,KAAKnC,QAASxI,EAAQkB,uBAKjD,eAACgR,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,EAApB,UACI,eAACgL,GAAA,EAAU/I,MAAX,CAAiB8E,OAAQ,EAAzB,UACI,cAACiE,GAAA,EAAD,CAAWxN,MAAM,YAAYzK,MAAO/B,EAAQmE,iBAC5C,cAAC6V,GAAA,EAAD,CAAWxN,MAAM,YAAYzK,MAAO/B,EAAQwG,oBAEhD,cAACsI,EAAA,EAAD,IACA,cAAC,GAAD,CAAc9O,QAASA,eCrB5BqK,gBAAS,WAAwB,IACrC9K,EAAYqU,cAAZrU,SACAkJ,EAAgB0B,IAAhB1B,aACAjD,EAAuDiD,EAAvDjD,eAAgBQ,EAAuCyC,EAAvCzC,YAAahG,EAA0ByI,EAA1BzI,QAAS+F,EAAiB0C,EAAjB1C,aAS7C,OAPAkM,qBAAU,WAEN,OADAjM,EAAYzG,GACL,WACHwG,EAAa,MAElB,CAACC,EAAazG,EAAUwG,IAEvBP,EAAuB,cAACoN,GAAD,CAAkBpK,QAAQ,uBAGjD,cAAC0J,GAAA,EAAD,UACI,cAACA,GAAA,EAAKQ,OAAN,CAAa1D,MAAO,GAApB,SACKhP,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,UCtBlC,SAASia,GAAT,GAA+D,IAA7BC,EAA4B,EAAvCC,UAAyBC,EAAc,8BACtDxL,EAAezE,IAA3BtH,UAAY+L,WACnB,OACI,cAAC,IAAD,2BACQwL,GADR,IAEI3M,OAAQ,SAACxB,GAAD,OAAW2C,EAAa,cAACsL,EAAD,eAAejO,IAAY,cAAC,IAAD,CAAUpB,GAAG,UCiDrER,oBA1Cf,WACE,IAAMgQ,EAAWC,cADJ,EAEoBnQ,IAA1B7N,EAFM,EAENA,YAAauG,EAFP,EAEOA,UAUpB,OARAoP,qBAAU,WACJ3V,EAAYF,MACdyG,EAAUyE,UAAUiT,SAAQ,kBAAMje,EAAY6L,kBAE9CtF,EAAU4E,yBAAyB1J,MAAK,kBAAMzB,EAAY6L,oBAE3D,CAAC7L,EAAauG,IAEZvG,EAAY4L,UAGf,qCACE,cAAC,IAAD,CAAgBoD,SAAS,eAAekP,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,IAAD,CAAO1P,OAAK,EAAC2P,KAAK,IAAIN,UAAWO,KACjC,cAAC,IAAD,CACED,KAAI,QACJhN,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAAChD,EAAA,EAAD,CAAWS,MAAO,CAAC+D,UAAW,OAA9B,SACE,eAAC,IAAD,WACE,cAACgL,GAAD,CAAcnP,OAAK,EAAC2P,KAAK,cAAcN,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAAiCQ,KAAM,CAAC,kBAAkB,eAAeN,UAAWU,IAAjER,EAAS/c,KAC5B,cAAC2c,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWW,KACpD,cAACb,GAAD,CAAcQ,KAAK,UAAUN,UAAWrE,KACxC,cAAC,IAAD,CAAO2E,KAAK,gBAAgBN,UAAWY,KACvC,cAAC,IAAD,CAAOZ,UAAWjE,mBApBG,cAACtD,GAAD,CAAkBpK,QAAQ,sBCjBhDwS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnd,MAAK,YAAkD,IAA/Cod,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KAAe,IAC3BC,EAAanB,cAAbmB,SAMR,OAJAxJ,qBAAU,WACN9K,OAAOuU,SAAS,EAAG,KACpB,CAACD,IAEG,KCIJ,IAAMte,GAAUwe,eAEvBC,IAASnO,OACP,cAACxD,EAAa4R,SAAd,CAAuB9Z,MAAO1F,EAA9B,SACE,eAAC,IAAD,CAAQc,QAASA,GAAjB,UACE,cAACqe,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.b3333665.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize\n    }\n}","import axios from 'axios';\nimport axious, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { URLSearchParams } from 'url';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxious.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxious.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxious.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors){\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T> (url:string) => axious.get<T>(url).then(responseBody),\n    post: <T>(url:string, body: {}) => axious.post<T>(url, body).then(responseBody),\n    put: <T>(url:string, body: {}) => axious.put<T>(url, body).then(responseBody),\n    del: <T>(url:string) => axious.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n        .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`,activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    regiseter: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`,{}),\n    listFollowings: (username: string, predicate: string) => \n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent ={\n    Activities,\n    Account,\n    Profiles\n}\n\n export default agent;\n\n","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n  }\n\n  export class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n      Object.assign(this, init);\n    }\n  }\n\n  export class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n      if (activity) {\n        this.id = activity.id;\n        this.title = activity.title;\n        this.category = activity.category;\n        this.description = activity.description;\n        this.date = activity.date;\n        this.venue = activity.venue;\n        this.city = activity.city;\n      }\n    }\n  }","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { Pagination, PagingParams } from './../models/pagination';\nimport { format } from \"date-fns\";\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<String, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this)\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                    this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() =>{\n                    this.selectedActivity = activity;\n                })                \n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error){\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updateActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updateActivity as Activity);\n                    this.selectedActivity = updateActivity as Activity;\n                }\n            })\n        } catch(error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    } \n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }    \n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab =(activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image= photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false)\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loadingActivities = false;\n            })\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n    fbAccessToken: string | null = null;\n    fbLoading = false;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (cred: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(cred);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (cred: UserFormValues) => {\n        try {\n            const user = await agent.Account.regiseter(cred);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image; \n    }\n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n\n    getFacebookLoginStatus = async () => {\n        window.FB.getLoginStatus(response => {\n            if (response.status === 'connected') {\n                this.fbAccessToken = response.authResponse.accessToken;\n            }\n        })\n    }\n\n    facebookLogin = () => {\n        this.fbLoading = true;\n        const apiLogin = (accessToken: string) => {\n            agent.Account.fbLogin(accessToken).then(user => {\n                store.commonStore.setToken(user.token);\n                runInAction(() => {\n                    this.user = user;\n                    this.fbLoading = false;\n                })\n                history.push('/activities');\n            }).catch(error => {\n                console.log(error);\n                runInAction(() => this.fbLoading = false);\n            })\n        }\n        if (this.fbAccessToken) {\n            apiLogin(this.fbAccessToken);\n        } else {\n            window.FB.login(response => {\n                apiLogin(response.authResponse.accessToken);\n            }, {scope: 'public_profile,email'})\n        }\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commomStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean,\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}\n\n","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection : ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection : ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n    const {userStore: {user, logout}} = useStore();\n    return(\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt='logo' style={{marginRight: '10px'}} />\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities'/>\n                <Menu.Item as={NavLink} to='/errors' name='Errors'/>\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                        <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \n                            text='My Profile' icon='user' />\n                        <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                    setErrors({error: \"Invalid email or password\"}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() => \n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />        \n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationError({errors}: Props){\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Form, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../error/ValidationErrors';\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() => \n                        <ValidationErrors errors={errors.error} />}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} positive content='Register' type='submit' fluid />        \n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' styple={{marginBottom: 12}} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivites' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>   \n\n                ) : (\n                        <>\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                                Login\n                            </Button>\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                                Register\n                            </Button>\n                            <Divider horizontal inverted>Or</Divider>\n                            <Button\n                                loading={userStore.fbLoading}\n                                size='huge'\n                                inverted\n                                color='facebook'\n                                content='Login with Facebook'\n                                onClick={userStore.facebookLogin}\n                            />\n                        </> \n                    )}      \n            </Container>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport react from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activities' \n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\" \n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\" \n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar \n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({profile}: Props){\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not following'} \n                />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button \n                    fluid \n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'} \n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default function ProfileCard({profile}: Props){\n    function truncate(str: string| undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user'/ >\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n}","import { profile } from 'console';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendees => (\n                <Popup \n                    hoverable\n                    key={attendees.username}\n                    trigger ={\n                        <List.Item key={attendees.username} as={Link} to={`/profiles/${attendees.username}`}>\n                            <Image \n                                size='mini' \n                                circular src={attendees.image || '/assets/user.png'} \n                                bordered\n                                style={attendees.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendees} />\n                    </Popup.Content>\n                </Popup>\n                \n            ))}\n        </List>\n    )\n})","import { format } from 'date-fns';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport AcitvityListItemAttendee from './AcitvityListItemAttendee';\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default function ActivityListItem({activity} : Props){\n\n    return(\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled && \n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{\n                                activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <AcitvityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button \n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList(){\n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n\n    return(\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                        {activities.map(activity => (\n                            <ActivityListItem key={activity.id} activity={activity}/>\n                        ))}\n                </Fragment>\n            ))}\n        </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, GridColumn, Loader } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nexport default observer(function AcitvityDashboard(){\n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n\n    return(\n        <Grid>\n            <GridColumn width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </GridColumn>\n            <GridColumn width='6'>\n                <ActivityFilters />\n            </GridColumn>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props{\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}:Props){\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid} from 'uuid';\nimport { Link } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { Activity, ActivityFormValues } from '../../../app/models/activity';\n\nexport default observer(function ActivityForm(){\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, \n            loadActivity, loadingInitial} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    })\n\n    useEffect(()=> {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues){\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return(\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={activity} \n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput  \n                            placeholderText='Date' \n                            name='date' \n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} floated='right' \n                            positive type='submit' content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { values } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n    const {commentStore} = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) => \n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                    >\n                        {({isSubmitting, isValid, handleSubmit}) => (\n                            <Form className='ui form'>\n                                <Field name='body'>\n                                    {(props: FieldProps) => (\n                                        <div style={{position: 'relative'}}>\n                                            <Loader active={isSubmitting} />\n                                            <textarea \n                                                placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                                rows={2}\n                                                {...props.field}\n                                                onKeyPress={e => {\n                                                    if (e.key === 'Enter' && e.shiftKey) {\n                                                        return;\n                                                    }\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\n                                                        e.preventDefault();\n                                                        isValid && handleSubmit();\n                                                    }\n                                                }}\n                                            />\n                                        </div>\n                                    )}\n                                </Field>\n                            </Form>\n                        )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n\n                    \n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled && \n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button \n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link} \n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`} \n                            color='orange' \n                            floated='right'>\n                            Manage Event\n                       </Button> \n                    </>\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled}\n                        loading={loading} onClick={updateAttendance} color='teal'>\n                            Join Activity\n                    </Button>\n                )}               \n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if(!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendees => (\n                        <Item style={{ position: 'relative' }} key={attendees.username}>\n                            {attendees.username === host?.username && \n                            <Label\n                                style={{ position: 'absolute' }}\n                                color='orange'\n                                ribbon='right'\n                            >\n                            Host\n                        </Label>}\n                        <Image size='tiny' src={attendees.image || '/assets/user.png'} />\n                        <Item.Content verticalAlign='middle'>\n                            <Item.Header as='h3'>\n                                <Link to={`/profiles/${attendees.username}`}>{attendees.displayName}</Link>\n                            </Item.Header>\n                            {attendees.following && \n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                        </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\ninterface Props{\n    cancelSelectActivity: () => void;\n    openForm: (id: string) => void;\n}\n\nexport default observer(function ActivityDetails(){\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity!} />\n            </Grid.Column>\n        </Grid>\n    ) \n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationError from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/g').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationError errors={errors} />\n            }\n        </>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oop - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page.\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import { Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport MyTextArea from '../../app/common/form/MyTextArea';\nimport { Button } from 'semantic-ui-react';\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEdit({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore();\n    return (\n        <Formik \n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n            onSubmit= {values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n            {({isSubmitting, isValid, dirty}) => (\n                <Form className='ui form'>\n                    <MyTextInput placeholder='Display Name' name='displayName' />\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\n                    <Button\n                        positive\n                        type='submit'\n                        loading={isSubmitting}\n                        content='Update profile'\n                        floated='right'\n                        disabled={!isValid || !dirty}\n                    />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEdit from './ProfileEdit';\n\nexport default observer(function ProfileAbout() {\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? <ProfileEdit setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>} \n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\nimport { UserActivity } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future'} },\n    { menuItem: 'Past Events', pane: { key: 'past'} },\n    { menuItem: 'Hosting', pane: { key: 'hosting'} },\n];\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    }\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab \n                        panes={panes}\n                        menu={{ secondary: true, pointing: true}}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image \n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHegiht: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n});","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings(){\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header \n                        floated='left' \n                        icon='user' \n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is followings`} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css'; \n\ninterface Props {\n    imagePreview : string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColder: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor : 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Button, Grid, Header, Image } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview)) \n        }\n    }, [files])\n    \n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                <>\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\n                <Button.Group widths={2}>\n                    <Button loading={loading} onClick={onCrop} positive icon='check' />\n                    <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({profile}: Props) {\n    const {profileStore: {isCurrentUser, uploadPhoto, \n            uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTraget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTraget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTraget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic \n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'} \n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ): (\n                            <Card.Group itemsPerRow={5}>\n                                {profile.photos?.map(photo => (\n                                    <Card key={photo.id}>\n                                        <Image src={photo.url} />\n                                        {isCurrentUser && (\n                                            <Button.Group fluid widths={2}>\n                                                <Button \n                                                    basic\n                                                    color='green'\n                                                    content='Main'\n                                                    name={'main' + photo.id}\n                                                    disabled={photo.isMain}\n                                                    loading = {target === 'main' + photo.id && loading}\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\n                                                />\n                                                <Button \n                                                    basic \n                                                    color='red' \n                                                    icon='trash'\n                                                    loading = {target === photo.id && loading}\n                                                    onClick={e => handleDeletePhoto(photo, e)}\n                                                    disabled={photo.isMain}\n                                                    name={photo.id}\n                                                />\n                                            </Button.Group>\n                                        )}\n                                    </Card>\n                                ))}\n                            </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n            \n            \n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport ProfileStore from '../../app/stores/profileStore';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\n    ];\n\n    return (\n        <Tab\n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' /> }\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/error/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/error/NotFound';\nimport ServerError from '../../features/error/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());      \n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route \n        path={`/(.+)`}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity','/manage/:id']}component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>             \n            </Container>\n          </>\n        )}\n      />      \n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App'\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}