{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commomStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/error/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/AcitvityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/error/TestError.tsx","features/error/NotFound.tsx","features/error/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEdit.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axious","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","axios","details","id","create","activity","update","attend","Account","current","login","user","regiseter","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","cred","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","register","creds","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBottom","fluid","ValidationError","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","styple","RegisterForm","Divider","horizontal","width","marginTop","attached","active","has","onChange","Reveal","animated","Content","visible","hidden","e","preventDefault","handleFollow","ProfileCard","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","secondary","AcitvityListItemAttendee","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","GridColumn","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Column","Loader","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","minHegiht","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderColder","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTraget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.ca8130ad.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize\n    }\n}","import axios from 'axios';\nimport axious, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { URLSearchParams } from 'url';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxious.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxious.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxious.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config, headers} = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors){\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            }\n            break;\n        case 401:\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')){\n                store.userStore.logout();\n                toast.error('Session expired - please login again');\n            }\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T> (url:string) => axious.get<T>(url).then(responseBody),\n    post: <T>(url:string, body: {}) => axious.post<T>(url, body).then(responseBody),\n    put: <T>(url:string, body: {}) => axious.put<T>(url, body).then(responseBody),\n    del: <T>(url:string) => axious.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n        .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`,activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    regiseter: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\n    verifyEmail: (token: string, email: string) => \n        requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\n    resendEmailConfirm: (email: string) =>\n        requests.get(`/account/resendEmailConfirmationLink?email=${email}`)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`,{}),\n    listFollowings: (username: string, predicate: string) => \n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent ={\n    Activities,\n    Account,\n    Profiles\n}\n\n export default agent;\n\n","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n  }\n\n  export class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n      Object.assign(this, init);\n    }\n  }\n\n  export class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n      if (activity) {\n        this.id = activity.id;\n        this.title = activity.title;\n        this.category = activity.category;\n        this.description = activity.description;\n        this.date = activity.date;\n        this.venue = activity.venue;\n        this.city = activity.city;\n      }\n    }\n  }","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { Pagination, PagingParams } from './../models/pagination';\nimport { format } from \"date-fns\";\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<String, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this)\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                    this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() =>{\n                    this.selectedActivity = activity;\n                })                \n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error){\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updateActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updateActivity as Activity);\n                    this.selectedActivity = updateActivity as Activity;\n                }\n            })\n        } catch(error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    } \n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }    \n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab =(activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image= photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false)\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loadingActivities = false;\n            })\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n    fbAccessToken: string | null = null;\n    fbLoading = false;\n    refreshTokenTimeout: any;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (cred: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(cred);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            this.startRefreshTokenTimer(user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            await agent.Account.regiseter(creds);\n            history.push(`/account/registerSuccess?email=${creds.email}`);\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image; \n    }\n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n\n    getFacebookLoginStatus = async () => {\n        window.FB.getLoginStatus(response => {\n            if (response.status === 'connected') {\n                this.fbAccessToken = response.authResponse.accessToken;\n            }\n        })\n    }\n\n    facebookLogin = () => {\n        this.fbLoading = true;\n        const apiLogin = (accessToken: string) => {\n            agent.Account.fbLogin(accessToken).then(user => {\n                store.commonStore.setToken(user.token);\n                this.startRefreshTokenTimer(user);\n                runInAction(() => {\n                    this.user = user;\n                    this.fbLoading = false;\n                })\n                history.push('/activities');\n            }).catch(error => {\n                console.log(error);\n                runInAction(() => this.fbLoading = false);\n            })\n        }\n        if (this.fbAccessToken) {\n            apiLogin(this.fbAccessToken);\n        } else {\n            window.FB.login(response => {\n                apiLogin(response.authResponse.accessToken);\n            }, {scope: 'public_profile,email'})\n        }\n    }\n\n    refreshToken = async () => {\n        this.stopRefreshTokenTimer();\n        try {\n            const user = await agent.Account.refreshToken();\n            runInAction(() => this.user = user);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    private startRefreshTokenTimer(user: User) {\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\n    }\n\n    private stopRefreshTokenTimer() {\n        clearTimeout(this.refreshTokenTimeout);\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commomStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean,\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}\n\n","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection : ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection : ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n    const {userStore: {user, logout, isLoggedIn}} = useStore();\n    return(\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt='logo' style={{marginRight: '10px'}} />\n                    Reactivities\n                </Menu.Item>\n                {isLoggedIn && \n                <>\n                    <Menu.Item as={NavLink} to='/activities' name='Activities'/>\n                    <Menu.Item as={NavLink} to='/errors' name='Errors'/>\n                    <Menu.Item>\n                        <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                    </Menu.Item>\n                    <Menu.Item position='right'>\n                        <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                        <Dropdown pointing='top left' text={user?.displayName}>\n                            <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \n                                text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Menu.Item>\n                </>}\n            </Container>\n        </Menu>\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                    setErrors({error: error.response.data}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() => \n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />        \n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationError({errors}: Props){\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Form, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../error/ValidationErrors';\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() => \n                        <ValidationErrors errors={errors.error} />}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} positive content='Register' type='submit' fluid />        \n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' styple={{marginBottom: 12}} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivites' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>   \n\n                ) : (\n                        <>\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                                Login\n                            </Button>\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                                Register\n                            </Button>\n                            <Divider horizontal inverted>Or</Divider>\n                            <Button\n                                loading={userStore.fbLoading}\n                                size='huge'\n                                inverted\n                                color='facebook'\n                                content='Login with Facebook'\n                                onClick={userStore.facebookLogin}\n                            />\n                        </> \n                    )}      \n            </Container>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport react from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activities' \n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\" \n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\" \n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar \n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({profile}: Props){\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not following'} \n                />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button \n                    fluid \n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'} \n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default function ProfileCard({profile}: Props){\n    function truncate(str: string| undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user'/ >\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n}","import { profile } from 'console';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendees => (\n                <Popup \n                    hoverable\n                    key={attendees.username}\n                    trigger ={\n                        <List.Item key={attendees.username} as={Link} to={`/profiles/${attendees.username}`}>\n                            <Image \n                                size='mini' \n                                circular src={attendees.image || '/assets/user.png'} \n                                bordered\n                                style={attendees.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendees} />\n                    </Popup.Content>\n                </Popup>\n                \n            ))}\n        </List>\n    )\n})","import { format } from 'date-fns';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport AcitvityListItemAttendee from './AcitvityListItemAttendee';\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default function ActivityListItem({activity} : Props){\n\n    return(\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled && \n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{\n                                activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <AcitvityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button \n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList(){\n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n\n    return(\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                        {activities.map(activity => (\n                            <ActivityListItem key={activity.id} activity={activity}/>\n                        ))}\n                </Fragment>\n            ))}\n        </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, GridColumn, Loader } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nexport default observer(function AcitvityDashboard(){\n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n\n    return(\n        <Grid>\n            <GridColumn width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </GridColumn>\n            <GridColumn width='6'>\n                <ActivityFilters />\n            </GridColumn>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props{\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}:Props){\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid} from 'uuid';\nimport { Link } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { Activity, ActivityFormValues } from '../../../app/models/activity';\n\nexport default observer(function ActivityForm(){\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, \n            loadActivity, loadingInitial} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    })\n\n    useEffect(()=> {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues){\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return(\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={activity} \n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput  \n                            placeholderText='Date' \n                            name='date' \n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} floated='right' \n                            positive type='submit' content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { values } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n    const {commentStore} = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) => \n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                    >\n                        {({isSubmitting, isValid, handleSubmit}) => (\n                            <Form className='ui form'>\n                                <Field name='body'>\n                                    {(props: FieldProps) => (\n                                        <div style={{position: 'relative'}}>\n                                            <Loader active={isSubmitting} />\n                                            <textarea \n                                                placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                                rows={2}\n                                                {...props.field}\n                                                onKeyPress={e => {\n                                                    if (e.key === 'Enter' && e.shiftKey) {\n                                                        return;\n                                                    }\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\n                                                        e.preventDefault();\n                                                        isValid && handleSubmit();\n                                                    }\n                                                }}\n                                            />\n                                        </div>\n                                    )}\n                                </Field>\n                            </Form>\n                        )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n\n                    \n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled && \n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button \n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link} \n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`} \n                            color='orange' \n                            floated='right'>\n                            Manage Event\n                       </Button> \n                    </>\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled}\n                        loading={loading} onClick={updateAttendance} color='teal'>\n                            Join Activity\n                    </Button>\n                )}               \n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if(!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendees => (\n                        <Item style={{ position: 'relative' }} key={attendees.username}>\n                            {attendees.username === host?.username && \n                            <Label\n                                style={{ position: 'absolute' }}\n                                color='orange'\n                                ribbon='right'\n                            >\n                            Host\n                        </Label>}\n                        <Image size='tiny' src={attendees.image || '/assets/user.png'} />\n                        <Item.Content verticalAlign='middle'>\n                            <Item.Header as='h3'>\n                                <Link to={`/profiles/${attendees.username}`}>{attendees.displayName}</Link>\n                            </Item.Header>\n                            {attendees.following && \n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                        </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\ninterface Props{\n    cancelSelectActivity: () => void;\n    openForm: (id: string) => void;\n}\n\nexport default observer(function ActivityDetails(){\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity!} />\n            </Grid.Column>\n        </Grid>\n    ) \n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationError from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/g').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationError errors={errors} />\n            }\n        </>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oop - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page.\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import { Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport MyTextArea from '../../app/common/form/MyTextArea';\nimport { Button } from 'semantic-ui-react';\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEdit({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore();\n    return (\n        <Formik \n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n            onSubmit= {values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n            {({isSubmitting, isValid, dirty}) => (\n                <Form className='ui form'>\n                    <MyTextInput placeholder='Display Name' name='displayName' />\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\n                    <Button\n                        positive\n                        type='submit'\n                        loading={isSubmitting}\n                        content='Update profile'\n                        floated='right'\n                        disabled={!isValid || !dirty}\n                    />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEdit from './ProfileEdit';\n\nexport default observer(function ProfileAbout() {\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? <ProfileEdit setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>} \n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\nimport { UserActivity } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future'} },\n    { menuItem: 'Past Events', pane: { key: 'past'} },\n    { menuItem: 'Hosting', pane: { key: 'hosting'} },\n];\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    }\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab \n                        panes={panes}\n                        menu={{ secondary: true, pointing: true}}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image \n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHegiht: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n});","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings(){\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header \n                        floated='left' \n                        icon='user' \n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is followings`} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css'; \n\ninterface Props {\n    imagePreview : string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColder: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor : 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Button, Grid, Header, Image } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview)) \n        }\n    }, [files])\n    \n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                <>\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\n                <Button.Group widths={2}>\n                    <Button loading={loading} onClick={onCrop} positive icon='check' />\n                    <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({profile}: Props) {\n    const {profileStore: {isCurrentUser, uploadPhoto, \n            uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTraget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTraget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTraget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic \n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'} \n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ): (\n                            <Card.Group itemsPerRow={5}>\n                                {profile.photos?.map(photo => (\n                                    <Card key={photo.id}>\n                                        <Image src={photo.url} />\n                                        {isCurrentUser && (\n                                            <Button.Group fluid widths={2}>\n                                                <Button \n                                                    basic\n                                                    color='green'\n                                                    content='Main'\n                                                    name={'main' + photo.id}\n                                                    disabled={photo.isMain}\n                                                    loading = {target === 'main' + photo.id && loading}\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\n                                                />\n                                                <Button \n                                                    basic \n                                                    color='red' \n                                                    icon='trash'\n                                                    loading = {target === photo.id && loading}\n                                                    onClick={e => handleDeletePhoto(photo, e)}\n                                                    disabled={photo.isMain}\n                                                    name={photo.id}\n                                                />\n                                            </Button.Group>\n                                        )}\n                                    </Card>\n                                ))}\n                            </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n            \n            \n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport ProfileStore from '../../app/stores/profileStore';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\n    ];\n\n    return (\n        <Tab\n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' /> }\n        />\n    )\n}","import { useLocation } from 'react-router';\n\nexport default function useQuery() {\n    return new URLSearchParams(useLocation().search);\n}","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport agent from '../../app/api/agent';\nimport useQuery from '../../app/common/util/hooks';\n\nexport default function RegisterSuccess() {\n    const email = useQuery().get('email') as string;\n\n    function handleConfirmEmailResend() {\n        agent.Account.resendEmailConfirm(email).then(() => {\n            toast.success('Verification email resent - please check your email');\n        }).catch(error => console.log(error));\n    }\n\n    return (\n        <Segment placeholder textAlign='center'>\n            <Header icon color='green'>\n                <Icon name='check' />\n                Successfully registered!\n            </Header>\n            <p>Please check your email (including junk email) for the Verification email</p>\n            {email && \n                <>\n                    <p>Didn't receive the email? Click the below button to resend</p>\n                    <Button primary onClick={handleConfirmEmailResend} \n                        content='Resend email' size='huge'/>\n                </>\n            }\n        </Segment>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { toast } from 'react-toastify';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport agent from '../../app/api/agent';\nimport useQuery from '../../app/common/util/hooks';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from './LoginForm';\n\nexport default function ConfirmEmail() {\n    const {modalStore} = useStore();\n    const email = useQuery().get('email') as string;\n    const token = useQuery().get('token') as string;\n\n    const Status = {\n        Verifying: 'Verifying',\n        Failed: 'Failed',\n        Success: 'Success'\n    }\n\n    const [status, setStatus] = useState(Status.Verifying);\n\n    function handleConfirmEmailResend() {\n        agent.Account.resendEmailConfirm(email).then(() => {\n            toast.success('Verification email resent - please check your email');\n        }).catch(error => console.log(error));\n    }\n\n    useEffect(() => {\n        agent.Account.verifyEmail(token, email).then(() => {\n            setStatus(Status.Success)\n        }).catch(() => {\n            setStatus(Status.Failed)\n        })\n    }, [Status.Failed, Status.Success, token, email])\n\n    function getBody() {\n        switch (status) {\n            case Status.Verifying:\n                return <p>Verifying...</p>;\n            case Status.Failed:\n                return (\n                    <div>\n                        <p>Verification failed. You can try resending the verify link to your email</p>\n                        <Button primary onClick={handleConfirmEmailResend} size='huge' content='Resend Email' />\n                    </div>\n                );\n            case Status.Success:\n                return (\n                    <div>\n                        <p>Email has been verified - you can now login</p>\n                        <Button primary onClick={() => modalStore.openModal(<LoginForm />)} size='huge' content='Login' />\n                    </div>\n                );\n        }\n    }\n    \n    return (\n        <Segment placeholder textAlign='center'>\n            <Header icon>\n                <Icon name='envelope' />\n                Email verification\n            </Header>\n            <Segment.Inline>\n                {getBody()}\n            </Segment.Inline>\n        </Segment>\n    )\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/error/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/error/NotFound';\nimport ServerError from '../../features/error/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());      \n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route \n        path={`/(.+)`}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity','/manage/:id']}component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route path='/account/registerSuccess' component={RegisterSuccess} />\n                <Route path='/account/verifyEmail' component={ConfirmEmail} />\n                <Route component={NotFound} />\n              </Switch>             \n            </Container>\n          </>\n        )}\n      />      \n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App'\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}